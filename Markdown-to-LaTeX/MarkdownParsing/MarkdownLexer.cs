//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/artur/RiderProjects/Markdown-to-LaTeX/Markdown-to-LaTeX/MarkdownLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MarkdownParsing {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MarkdownLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Newline=1, Space=2, Tab=3, EscExclamation=4, EscDoubleQuote=5, EscSharp=6, 
		EscDolar=7, EscPercent=8, EscAmp=9, EscQuote=10, EscLPAREN=11, EscRPAREN=12, 
		EscStar=13, EscPlus=14, EscComma=15, EscDash=16, EscDot=17, EscSlash=18, 
		EscColon=19, EscSemicilon=20, EscLT=21, EscEqual=22, EscGT=23, EscQuestion=24, 
		EscAt=25, EscLBRACKET=26, EscBackslash=27, EscRBRACKET=28, EscCarrot=29, 
		EscUnderscore=30, EscCode=31, EscLBRACE=32, EscPipe=33, EscRBRACE=34, 
		EscTilde=35, LBRACKET=36, RBRACKET=37, LPAREN=38, RPAREN=39, LBRACE=40, 
		RBRACE=41, LT=42, GT=43, Dot=44, Slash=45, Backslash=46, Colon=47, Semicolon=48, 
		Exclamation=49, Quote=50, DoubleQuote=51, Sharp=52, Dolar=53, Percent=54, 
		Amp=55, Comma=56, Equal=57, Question=58, At=59, Carrot=60, Underscore=61, 
		Pipe=62, Tilde=63, Dash=64, Star=65, Plus=66, Code=67, Digit=68, Other=69;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Newline", "Space", "Tab", "EscExclamation", "EscDoubleQuote", "EscSharp", 
		"EscDolar", "EscPercent", "EscAmp", "EscQuote", "EscLPAREN", "EscRPAREN", 
		"EscStar", "EscPlus", "EscComma", "EscDash", "EscDot", "EscSlash", "EscColon", 
		"EscSemicilon", "EscLT", "EscEqual", "EscGT", "EscQuestion", "EscAt", 
		"EscLBRACKET", "EscBackslash", "EscRBRACKET", "EscCarrot", "EscUnderscore", 
		"EscCode", "EscLBRACE", "EscPipe", "EscRBRACE", "EscTilde", "LBRACKET", 
		"RBRACKET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "Dot", 
		"Slash", "Backslash", "Colon", "Semicolon", "Exclamation", "Quote", "DoubleQuote", 
		"Sharp", "Dolar", "Percent", "Amp", "Comma", "Equal", "Question", "At", 
		"Carrot", "Underscore", "Pipe", "Tilde", "Dash", "Star", "Plus", "Code", 
		"Digit", "Other"
	};


	public MarkdownLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MarkdownLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "' '", "'\\t'", "'\\!'", "'\\\"'", "'\\#'", "'\\$'", "'\\%'", 
		"'\\&'", "'\\''", "'\\('", "'\\)'", "'\\*'", "'\\+'", "'\\,'", "'\\-'", 
		"'\\.'", "'\\/'", "'\\:'", "'\\;'", "'\\<'", "'\\='", "'\\>'", "'\\?'", 
		"'\\@'", "'\\['", "'\\\\'", "'\\]'", "'\\^'", "'\\_'", "'\\`'", "'\\{'", 
		"'\\|'", "'\\}'", "'\\~'", "'['", "']'", "'('", "')'", "'{'", "'}'", "'<'", 
		"'>'", "'.'", "'/'", "'\\'", "':'", "';'", "'!'", "'''", "'\"'", "'#'", 
		"'$'", "'%'", "'&'", "','", "'='", "'?'", "'@'", "'^'", "'_'", "'|'", 
		"'~'", "'-'", "'*'", "'+'", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Newline", "Space", "Tab", "EscExclamation", "EscDoubleQuote", "EscSharp", 
		"EscDolar", "EscPercent", "EscAmp", "EscQuote", "EscLPAREN", "EscRPAREN", 
		"EscStar", "EscPlus", "EscComma", "EscDash", "EscDot", "EscSlash", "EscColon", 
		"EscSemicilon", "EscLT", "EscEqual", "EscGT", "EscQuestion", "EscAt", 
		"EscLBRACKET", "EscBackslash", "EscRBRACKET", "EscCarrot", "EscUnderscore", 
		"EscCode", "EscLBRACE", "EscPipe", "EscRBRACE", "EscTilde", "LBRACKET", 
		"RBRACKET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "Dot", 
		"Slash", "Backslash", "Colon", "Semicolon", "Exclamation", "Quote", "DoubleQuote", 
		"Sharp", "Dolar", "Percent", "Amp", "Comma", "Equal", "Question", "At", 
		"Carrot", "Underscore", "Pipe", "Tilde", "Dash", "Star", "Plus", "Code", 
		"Digit", "Other"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MarkdownLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,69,314,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,3,0,141,8,0,
		1,0,1,0,3,0,145,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,
		5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
		1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
		1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
		1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
		1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
		1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
		1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
		1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
		1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
		1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,
		1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,0,0,69,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
		77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
		101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
		121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,1,0,1,1,
		0,48,57,315,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
		0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
		0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
		0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,
		0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,
		1,144,1,0,0,0,3,146,1,0,0,0,5,148,1,0,0,0,7,150,1,0,0,0,9,153,1,0,0,0,
		11,156,1,0,0,0,13,159,1,0,0,0,15,162,1,0,0,0,17,165,1,0,0,0,19,168,1,0,
		0,0,21,171,1,0,0,0,23,174,1,0,0,0,25,177,1,0,0,0,27,180,1,0,0,0,29,183,
		1,0,0,0,31,186,1,0,0,0,33,189,1,0,0,0,35,192,1,0,0,0,37,195,1,0,0,0,39,
		198,1,0,0,0,41,201,1,0,0,0,43,204,1,0,0,0,45,207,1,0,0,0,47,210,1,0,0,
		0,49,213,1,0,0,0,51,216,1,0,0,0,53,219,1,0,0,0,55,222,1,0,0,0,57,225,1,
		0,0,0,59,228,1,0,0,0,61,231,1,0,0,0,63,234,1,0,0,0,65,237,1,0,0,0,67,240,
		1,0,0,0,69,243,1,0,0,0,71,246,1,0,0,0,73,248,1,0,0,0,75,250,1,0,0,0,77,
		252,1,0,0,0,79,254,1,0,0,0,81,256,1,0,0,0,83,258,1,0,0,0,85,260,1,0,0,
		0,87,262,1,0,0,0,89,264,1,0,0,0,91,266,1,0,0,0,93,268,1,0,0,0,95,270,1,
		0,0,0,97,272,1,0,0,0,99,274,1,0,0,0,101,276,1,0,0,0,103,278,1,0,0,0,105,
		280,1,0,0,0,107,282,1,0,0,0,109,284,1,0,0,0,111,286,1,0,0,0,113,288,1,
		0,0,0,115,290,1,0,0,0,117,292,1,0,0,0,119,294,1,0,0,0,121,296,1,0,0,0,
		123,298,1,0,0,0,125,300,1,0,0,0,127,302,1,0,0,0,129,304,1,0,0,0,131,306,
		1,0,0,0,133,308,1,0,0,0,135,310,1,0,0,0,137,312,1,0,0,0,139,141,5,13,0,
		0,140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,145,5,10,0,0,143,
		145,5,13,0,0,144,140,1,0,0,0,144,143,1,0,0,0,145,2,1,0,0,0,146,147,5,32,
		0,0,147,4,1,0,0,0,148,149,5,9,0,0,149,6,1,0,0,0,150,151,5,92,0,0,151,152,
		5,33,0,0,152,8,1,0,0,0,153,154,5,92,0,0,154,155,5,34,0,0,155,10,1,0,0,
		0,156,157,5,92,0,0,157,158,5,35,0,0,158,12,1,0,0,0,159,160,5,92,0,0,160,
		161,5,36,0,0,161,14,1,0,0,0,162,163,5,92,0,0,163,164,5,37,0,0,164,16,1,
		0,0,0,165,166,5,92,0,0,166,167,5,38,0,0,167,18,1,0,0,0,168,169,5,92,0,
		0,169,170,5,39,0,0,170,20,1,0,0,0,171,172,5,92,0,0,172,173,5,40,0,0,173,
		22,1,0,0,0,174,175,5,92,0,0,175,176,5,41,0,0,176,24,1,0,0,0,177,178,5,
		92,0,0,178,179,5,42,0,0,179,26,1,0,0,0,180,181,5,92,0,0,181,182,5,43,0,
		0,182,28,1,0,0,0,183,184,5,92,0,0,184,185,5,44,0,0,185,30,1,0,0,0,186,
		187,5,92,0,0,187,188,5,45,0,0,188,32,1,0,0,0,189,190,5,92,0,0,190,191,
		5,46,0,0,191,34,1,0,0,0,192,193,5,92,0,0,193,194,5,47,0,0,194,36,1,0,0,
		0,195,196,5,92,0,0,196,197,5,58,0,0,197,38,1,0,0,0,198,199,5,92,0,0,199,
		200,5,59,0,0,200,40,1,0,0,0,201,202,5,92,0,0,202,203,5,60,0,0,203,42,1,
		0,0,0,204,205,5,92,0,0,205,206,5,61,0,0,206,44,1,0,0,0,207,208,5,92,0,
		0,208,209,5,62,0,0,209,46,1,0,0,0,210,211,5,92,0,0,211,212,5,63,0,0,212,
		48,1,0,0,0,213,214,5,92,0,0,214,215,5,64,0,0,215,50,1,0,0,0,216,217,5,
		92,0,0,217,218,5,91,0,0,218,52,1,0,0,0,219,220,5,92,0,0,220,221,5,92,0,
		0,221,54,1,0,0,0,222,223,5,92,0,0,223,224,5,93,0,0,224,56,1,0,0,0,225,
		226,5,92,0,0,226,227,5,94,0,0,227,58,1,0,0,0,228,229,5,92,0,0,229,230,
		5,95,0,0,230,60,1,0,0,0,231,232,5,92,0,0,232,233,5,96,0,0,233,62,1,0,0,
		0,234,235,5,92,0,0,235,236,5,123,0,0,236,64,1,0,0,0,237,238,5,92,0,0,238,
		239,5,124,0,0,239,66,1,0,0,0,240,241,5,92,0,0,241,242,5,125,0,0,242,68,
		1,0,0,0,243,244,5,92,0,0,244,245,5,126,0,0,245,70,1,0,0,0,246,247,5,91,
		0,0,247,72,1,0,0,0,248,249,5,93,0,0,249,74,1,0,0,0,250,251,5,40,0,0,251,
		76,1,0,0,0,252,253,5,41,0,0,253,78,1,0,0,0,254,255,5,123,0,0,255,80,1,
		0,0,0,256,257,5,125,0,0,257,82,1,0,0,0,258,259,5,60,0,0,259,84,1,0,0,0,
		260,261,5,62,0,0,261,86,1,0,0,0,262,263,5,46,0,0,263,88,1,0,0,0,264,265,
		5,47,0,0,265,90,1,0,0,0,266,267,5,92,0,0,267,92,1,0,0,0,268,269,5,58,0,
		0,269,94,1,0,0,0,270,271,5,59,0,0,271,96,1,0,0,0,272,273,5,33,0,0,273,
		98,1,0,0,0,274,275,5,39,0,0,275,100,1,0,0,0,276,277,5,34,0,0,277,102,1,
		0,0,0,278,279,5,35,0,0,279,104,1,0,0,0,280,281,5,36,0,0,281,106,1,0,0,
		0,282,283,5,37,0,0,283,108,1,0,0,0,284,285,5,38,0,0,285,110,1,0,0,0,286,
		287,5,44,0,0,287,112,1,0,0,0,288,289,5,61,0,0,289,114,1,0,0,0,290,291,
		5,63,0,0,291,116,1,0,0,0,292,293,5,64,0,0,293,118,1,0,0,0,294,295,5,94,
		0,0,295,120,1,0,0,0,296,297,5,95,0,0,297,122,1,0,0,0,298,299,5,124,0,0,
		299,124,1,0,0,0,300,301,5,126,0,0,301,126,1,0,0,0,302,303,5,45,0,0,303,
		128,1,0,0,0,304,305,5,42,0,0,305,130,1,0,0,0,306,307,5,43,0,0,307,132,
		1,0,0,0,308,309,5,96,0,0,309,134,1,0,0,0,310,311,7,0,0,0,311,136,1,0,0,
		0,312,313,9,0,0,0,313,138,1,0,0,0,3,0,140,144,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MarkdownParsing
