//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/artur/RiderProjects/Markdown-to-LaTeX/Markdown-to-LaTeX/MarkdownParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MarkdownParsing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MarkdownParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Newline=1, Space=2, Tab=3, EscExclamation=4, EscDoubleQuote=5, EscSharp=6, 
		EscDolar=7, EscPercent=8, EscAmp=9, EscQuote=10, EscLPAREN=11, EscRPAREN=12, 
		EscStar=13, EscPlus=14, EscComma=15, EscDash=16, EscDot=17, EscSlash=18, 
		EscColon=19, EscSemicilon=20, EscLT=21, EscEqual=22, EscGT=23, EscQuestion=24, 
		EscAt=25, EscLBRACKET=26, EscBackslash=27, EscRBRACKET=28, EscCarrot=29, 
		EscUnderscore=30, EscCode=31, EscLBRACE=32, EscPipe=33, EscRBRACE=34, 
		EscTilde=35, LBRACKET=36, RBRACKET=37, LPAREN=38, RPAREN=39, LBRACE=40, 
		RBRACE=41, LT=42, GT=43, Dot=44, Slash=45, Backslash=46, Colon=47, Semicolon=48, 
		Exclamation=49, Quote=50, DoubleQuote=51, Sharp=52, Dolar=53, Percent=54, 
		Amp=55, Comma=56, Equal=57, Question=58, At=59, Carrot=60, Underscore=61, 
		Pipe=62, Tilde=63, Dash=64, Star=65, Plus=66, Code=67, Digit=68, Other=69;
	public const int
		RULE_document = 0, RULE_heading = 1, RULE_emptyHeading = 2, RULE_atxHeading = 3, 
		RULE_headingStart = 4, RULE_horizontalLine = 5, RULE_hLineDBegin = 6, 
		RULE_hLineUBegin = 7, RULE_hLineSBegin = 8, RULE_indent3 = 9, RULE_indent2 = 10, 
		RULE_indent1 = 11, RULE_fencedCode = 12, RULE_indentedCodeBlock = 13, 
		RULE_indentedCode1 = 14, RULE_list = 15, RULE_list1 = 16, RULE_list2 = 17, 
		RULE_list3 = 18, RULE_iList3 = 19, RULE_iList2 = 20, RULE_iList1 = 21, 
		RULE_iList0 = 22, RULE_iListItem3 = 23, RULE_iListItem2 = 24, RULE_iListItem1 = 25, 
		RULE_iListItem0 = 26, RULE_iListBegin = 27, RULE_eList3 = 28, RULE_eList2 = 29, 
		RULE_eList1 = 30, RULE_eList0 = 31, RULE_eListItem3 = 32, RULE_eListItem2 = 33, 
		RULE_eListItem1 = 34, RULE_eListItem0 = 35, RULE_eListBegin = 36, RULE_blockQuote = 37, 
		RULE_blockQuoteLine = 38, RULE_emptyBlockQuoteLine = 39, RULE_blockQuoteStart = 40, 
		RULE_table = 41, RULE_headerRow = 42, RULE_contentRow = 43, RULE_cellContent = 44, 
		RULE_separatorRow = 45, RULE_separatorContent = 46, RULE_imageLine = 47, 
		RULE_textLine = 48, RULE_requiredText = 49, RULE_optionalText = 50, RULE_displayText = 51, 
		RULE_linkText = 52, RULE_urlText = 53, RULE_headingText = 54, RULE_link = 55, 
		RULE_urlLink = 56, RULE_textLink = 57;
	public static readonly string[] ruleNames = {
		"document", "heading", "emptyHeading", "atxHeading", "headingStart", "horizontalLine", 
		"hLineDBegin", "hLineUBegin", "hLineSBegin", "indent3", "indent2", "indent1", 
		"fencedCode", "indentedCodeBlock", "indentedCode1", "list", "list1", "list2", 
		"list3", "iList3", "iList2", "iList1", "iList0", "iListItem3", "iListItem2", 
		"iListItem1", "iListItem0", "iListBegin", "eList3", "eList2", "eList1", 
		"eList0", "eListItem3", "eListItem2", "eListItem1", "eListItem0", "eListBegin", 
		"blockQuote", "blockQuoteLine", "emptyBlockQuoteLine", "blockQuoteStart", 
		"table", "headerRow", "contentRow", "cellContent", "separatorRow", "separatorContent", 
		"imageLine", "textLine", "requiredText", "optionalText", "displayText", 
		"linkText", "urlText", "headingText", "link", "urlLink", "textLink"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "' '", "'\\t'", "'\\!'", "'\\\"'", "'\\#'", "'\\$'", "'\\%'", 
		"'\\&'", "'\\''", "'\\('", "'\\)'", "'\\*'", "'\\+'", "'\\,'", "'\\-'", 
		"'\\.'", "'\\/'", "'\\:'", "'\\;'", "'\\<'", "'\\='", "'\\>'", "'\\?'", 
		"'\\@'", "'\\['", "'\\\\'", "'\\]'", "'\\^'", "'\\_'", "'\\`'", "'\\{'", 
		"'\\|'", "'\\}'", "'\\~'", "'['", "']'", "'('", "')'", "'{'", "'}'", "'<'", 
		"'>'", "'.'", "'/'", "'\\'", "':'", "';'", "'!'", "'''", "'\"'", "'#'", 
		"'$'", "'%'", "'&'", "','", "'='", "'?'", "'@'", "'^'", "'_'", "'|'", 
		"'~'", "'-'", "'*'", "'+'", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Newline", "Space", "Tab", "EscExclamation", "EscDoubleQuote", "EscSharp", 
		"EscDolar", "EscPercent", "EscAmp", "EscQuote", "EscLPAREN", "EscRPAREN", 
		"EscStar", "EscPlus", "EscComma", "EscDash", "EscDot", "EscSlash", "EscColon", 
		"EscSemicilon", "EscLT", "EscEqual", "EscGT", "EscQuestion", "EscAt", 
		"EscLBRACKET", "EscBackslash", "EscRBRACKET", "EscCarrot", "EscUnderscore", 
		"EscCode", "EscLBRACE", "EscPipe", "EscRBRACE", "EscTilde", "LBRACKET", 
		"RBRACKET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "Dot", 
		"Slash", "Backslash", "Colon", "Semicolon", "Exclamation", "Quote", "DoubleQuote", 
		"Sharp", "Dolar", "Percent", "Amp", "Comma", "Equal", "Question", "At", 
		"Carrot", "Underscore", "Pipe", "Tilde", "Dash", "Star", "Plus", "Code", 
		"Digit", "Other"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MarkdownParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MarkdownParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MarkdownParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext[] heading() {
			return GetRuleContexts<HeadingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext heading(int i) {
			return GetRuleContext<HeadingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HorizontalLineContext[] horizontalLine() {
			return GetRuleContexts<HorizontalLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HorizontalLineContext horizontalLine(int i) {
			return GetRuleContext<HorizontalLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedCodeContext[] fencedCode() {
			return GetRuleContexts<FencedCodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedCodeContext fencedCode(int i) {
			return GetRuleContext<FencedCodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCodeBlockContext[] indentedCodeBlock() {
			return GetRuleContexts<IndentedCodeBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCodeBlockContext indentedCodeBlock(int i) {
			return GetRuleContext<IndentedCodeBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext[] list() {
			return GetRuleContexts<ListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list(int i) {
			return GetRuleContext<ListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteContext[] blockQuote() {
			return GetRuleContexts<BlockQuoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteContext blockQuote(int i) {
			return GetRuleContext<BlockQuoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageLineContext[] imageLine() {
			return GetRuleContexts<ImageLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageLineContext imageLine(int i) {
			return GetRuleContext<ImageLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Newline) {
				{
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 116;
					heading();
					}
					break;
				case 2:
					{
					State = 117;
					horizontalLine();
					}
					break;
				case 3:
					{
					State = 118;
					fencedCode();
					}
					break;
				case 4:
					{
					State = 119;
					indentedCodeBlock();
					}
					break;
				case 5:
					{
					State = 120;
					list();
					}
					break;
				case 6:
					{
					State = 121;
					blockQuote();
					}
					break;
				case 7:
					{
					State = 122;
					table();
					}
					break;
				case 8:
					{
					State = 123;
					imageLine();
					}
					break;
				case 9:
					{
					State = 124;
					textLine();
					}
					break;
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtxHeadingContext atxHeading() {
			return GetRuleContext<AtxHeadingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyHeadingContext emptyHeading() {
			return GetRuleContext<EmptyHeadingContext>(0);
		}
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(Context, State);
		EnterRule(_localctx, 2, RULE_heading);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				atxHeading();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				emptyHeading();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyHeadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingStartContext headingStart() {
			return GetRuleContext<HeadingStartContext>(0);
		}
		public EmptyHeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyHeading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEmptyHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEmptyHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyHeadingContext emptyHeading() {
		EmptyHeadingContext _localctx = new EmptyHeadingContext(Context, State);
		EnterRule(_localctx, 4, RULE_emptyHeading);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			headingStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtxHeadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingStartContext headingStart() {
			return GetRuleContext<HeadingStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingTextContext headingText() {
			return GetRuleContext<HeadingTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sharp() { return GetTokens(MarkdownParser.Sharp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp(int i) {
			return GetToken(MarkdownParser.Sharp, i);
		}
		public AtxHeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atxHeading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterAtxHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitAtxHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtxHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtxHeadingContext atxHeading() {
		AtxHeadingContext _localctx = new AtxHeadingContext(Context, State);
		EnterRule(_localctx, 6, RULE_atxHeading);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			headingStart();
			State = 137;
			Match(Space);
			State = 138;
			headingText();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 139;
				Match(Space);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 140;
					Match(Sharp);
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sharp );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sharp() { return GetTokens(MarkdownParser.Sharp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp(int i) {
			return GetToken(MarkdownParser.Sharp, i);
		}
		public HeadingStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHeadingStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHeadingStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingStartContext headingStart() {
		HeadingStartContext _localctx = new HeadingStartContext(Context, State);
		EnterRule(_localctx, 8, RULE_headingStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(Newline);
			State = 148;
			Match(Sharp);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sharp) {
				{
				State = 149;
				Match(Sharp);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sharp) {
					{
					State = 150;
					Match(Sharp);
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Sharp) {
						{
						State = 151;
						Match(Sharp);
						State = 156;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Sharp) {
							{
							State = 152;
							Match(Sharp);
							State = 154;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Sharp) {
								{
								State = 153;
								Match(Sharp);
								}
							}

							}
						}

						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HLineDBeginContext hLineDBegin() {
			return GetRuleContext<HLineDBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(MarkdownParser.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(MarkdownParser.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HLineUBeginContext hLineUBegin() {
			return GetRuleContext<HLineUBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Underscore() { return GetTokens(MarkdownParser.Underscore); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore(int i) {
			return GetToken(MarkdownParser.Underscore, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HLineSBeginContext hLineSBegin() {
			return GetRuleContext<HLineSBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(MarkdownParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(MarkdownParser.Star, i);
		}
		public HorizontalLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHorizontalLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHorizontalLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalLineContext horizontalLine() {
		HorizontalLineContext _localctx = new HorizontalLineContext(Context, State);
		EnterRule(_localctx, 10, RULE_horizontalLine);
		int _la;
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				hLineDBegin();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Dash) {
					{
					{
					State = 165;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Dash) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171;
				Match(Newline);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				hLineUBegin();
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Underscore) {
					{
					{
					State = 174;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Underscore) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 180;
				Match(Newline);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				hLineSBegin();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Star) {
					{
					{
					State = 183;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Star) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 189;
				Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineDBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(MarkdownParser.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(MarkdownParser.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		public HLineDBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineDBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHLineDBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHLineDBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineDBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineDBeginContext hLineDBegin() {
		HLineDBeginContext _localctx = new HLineDBeginContext(Context, State);
		EnterRule(_localctx, 12, RULE_hLineDBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Newline);
			State = 194;
			Match(Dash);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 195;
				Match(Space);
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			Match(Dash);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 202;
				Match(Space);
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(Dash);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineUBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Underscore() { return GetTokens(MarkdownParser.Underscore); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore(int i) {
			return GetToken(MarkdownParser.Underscore, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		public HLineUBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineUBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHLineUBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHLineUBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineUBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineUBeginContext hLineUBegin() {
		HLineUBeginContext _localctx = new HLineUBeginContext(Context, State);
		EnterRule(_localctx, 14, RULE_hLineUBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(Newline);
			State = 211;
			Match(Underscore);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 212;
				Match(Space);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			Match(Underscore);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 219;
				Match(Space);
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineSBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(MarkdownParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(MarkdownParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		public HLineSBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineSBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHLineSBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHLineSBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineSBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineSBeginContext hLineSBegin() {
		HLineSBeginContext _localctx = new HLineSBeginContext(Context, State);
		EnterRule(_localctx, 16, RULE_hLineSBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(Newline);
			State = 228;
			Match(Star);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 229;
				Match(Space);
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			Match(Star);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 236;
				Match(Space);
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 242;
			Match(Star);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		public Indent3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIndent3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIndent3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent3Context indent3() {
		Indent3Context _localctx = new Indent3Context(Context, State);
		EnterRule(_localctx, 18, RULE_indent3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(Newline);
			State = 245;
			Match(Space);
			State = 246;
			Match(Space);
			State = 247;
			Match(Space);
			State = 248;
			Match(Space);
			State = 249;
			Match(Space);
			State = 250;
			Match(Space);
			State = 251;
			Match(Space);
			State = 252;
			Match(Space);
			State = 253;
			Match(Space);
			State = 254;
			Match(Space);
			State = 255;
			Match(Space);
			State = 256;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		public Indent2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIndent2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIndent2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent2Context indent2() {
		Indent2Context _localctx = new Indent2Context(Context, State);
		EnterRule(_localctx, 20, RULE_indent2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(Newline);
			State = 259;
			Match(Space);
			State = 260;
			Match(Space);
			State = 261;
			Match(Space);
			State = 262;
			Match(Space);
			State = 263;
			Match(Space);
			State = 264;
			Match(Space);
			State = 265;
			Match(Space);
			State = 266;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		public Indent1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIndent1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIndent1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent1Context indent1() {
		Indent1Context _localctx = new Indent1Context(Context, State);
		EnterRule(_localctx, 22, RULE_indent1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(Newline);
			State = 269;
			Match(Space);
			State = 270;
			Match(Space);
			State = 271;
			Match(Space);
			State = 272;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FencedCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Code() { return GetTokens(MarkdownParser.Code); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Code(int i) {
			return GetToken(MarkdownParser.Code, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Tilde() { return GetTokens(MarkdownParser.Tilde); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde(int i) {
			return GetToken(MarkdownParser.Tilde, i);
		}
		public FencedCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fencedCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterFencedCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitFencedCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFencedCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FencedCodeContext fencedCode() {
		FencedCodeContext _localctx = new FencedCodeContext(Context, State);
		EnterRule(_localctx, 24, RULE_fencedCode);
		try {
			int _alt;
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274;
				Match(Newline);
				State = 275;
				Match(Code);
				State = 276;
				Match(Code);
				State = 277;
				Match(Code);
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 278;
						MatchWildcard();
						}
						} 
					}
					State = 283;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 284;
				Match(Code);
				State = 285;
				Match(Code);
				State = 286;
				Match(Code);
				State = 287;
				optionalText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				Match(Newline);
				State = 289;
				Match(Tilde);
				State = 290;
				Match(Tilde);
				State = 291;
				Match(Tilde);
				State = 295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 292;
						MatchWildcard();
						}
						} 
					}
					State = 297;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 298;
				Match(Tilde);
				State = 299;
				Match(Tilde);
				State = 300;
				Match(Tilde);
				State = 301;
				optionalText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedCodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCode1Context[] indentedCode1() {
			return GetRuleContexts<IndentedCode1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCode1Context indentedCode1(int i) {
			return GetRuleContext<IndentedCode1Context>(i);
		}
		public IndentedCodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedCodeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIndentedCodeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIndentedCodeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedCodeBlockContext indentedCodeBlock() {
		IndentedCodeBlockContext _localctx = new IndentedCodeBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_indentedCodeBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(Newline);
			State = 305;
			indentedCode1();
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 307;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						State = 306;
						Match(Newline);
						}
						break;
					}
					State = 309;
					indentedCode1();
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedCode1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public IndentedCode1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedCode1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIndentedCode1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIndentedCode1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedCode1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedCode1Context indentedCode1() {
		IndentedCode1Context _localctx = new IndentedCode1Context(Context, State);
		EnterRule(_localctx, 28, RULE_indentedCode1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			indent1();
			State = 316;
			requiredText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList0Context iList0() {
			return GetRuleContext<IList0Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList0Context eList0() {
			return GetRuleContext<EList0Context>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 30, RULE_list);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318;
				iList0();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319;
				eList0();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList1Context iList1() {
			return GetRuleContext<IList1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList1Context eList1() {
			return GetRuleContext<EList1Context>(0);
		}
		public List1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List1Context list1() {
		List1Context _localctx = new List1Context(Context, State);
		EnterRule(_localctx, 32, RULE_list1);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322;
				iList1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				eList1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList2Context iList2() {
			return GetRuleContext<IList2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList2Context eList2() {
			return GetRuleContext<EList2Context>(0);
		}
		public List2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List2Context list2() {
		List2Context _localctx = new List2Context(Context, State);
		EnterRule(_localctx, 34, RULE_list2);
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326;
				iList2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327;
				eList2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList3Context iList3() {
			return GetRuleContext<IList3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList3Context eList3() {
			return GetRuleContext<EList3Context>(0);
		}
		public List3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List3Context list3() {
		List3Context _localctx = new List3Context(Context, State);
		EnterRule(_localctx, 36, RULE_list3);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330;
				iList3();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				eList3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem3Context[] iListItem3() {
			return GetRuleContexts<IListItem3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem3Context iListItem3(int i) {
			return GetRuleContext<IListItem3Context>(i);
		}
		public IList3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList3Context iList3() {
		IList3Context _localctx = new IList3Context(Context, State);
		EnterRule(_localctx, 38, RULE_iList3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 334;
					iListItem3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem2Context[] iListItem2() {
			return GetRuleContexts<IListItem2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem2Context iListItem2(int i) {
			return GetRuleContext<IListItem2Context>(i);
		}
		public IList2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList2Context iList2() {
		IList2Context _localctx = new IList2Context(Context, State);
		EnterRule(_localctx, 40, RULE_iList2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 339;
					iListItem2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem1Context[] iListItem1() {
			return GetRuleContexts<IListItem1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem1Context iListItem1(int i) {
			return GetRuleContext<IListItem1Context>(i);
		}
		public IList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList1Context iList1() {
		IList1Context _localctx = new IList1Context(Context, State);
		EnterRule(_localctx, 42, RULE_iList1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 344;
					iListItem1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem0Context[] iListItem0() {
			return GetRuleContexts<IListItem0Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem0Context iListItem0(int i) {
			return GetRuleContext<IListItem0Context>(i);
		}
		public IList0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList0Context iList0() {
		IList0Context _localctx = new IList0Context(Context, State);
		EnterRule(_localctx, 44, RULE_iList0);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 349;
					iListItem0();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent3Context indent3() {
			return GetRuleContext<Indent3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public IListItem3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem3Context iListItem3() {
		IListItem3Context _localctx = new IListItem3Context(Context, State);
		EnterRule(_localctx, 46, RULE_iListItem3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			indent3();
			State = 355;
			iListBegin();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 356;
				Match(Space);
				State = 357;
				requiredText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent2Context indent2() {
			return GetRuleContext<Indent2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List3Context list3() {
			return GetRuleContext<List3Context>(0);
		}
		public IListItem2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem2Context iListItem2() {
		IListItem2Context _localctx = new IListItem2Context(Context, State);
		EnterRule(_localctx, 48, RULE_iListItem2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			indent2();
			State = 361;
			iListBegin();
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 362;
				Match(Space);
				State = 363;
				requiredText();
				}
			}

			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 366;
				list3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List2Context list2() {
			return GetRuleContext<List2Context>(0);
		}
		public IListItem1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem1Context iListItem1() {
		IListItem1Context _localctx = new IListItem1Context(Context, State);
		EnterRule(_localctx, 50, RULE_iListItem1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			indent1();
			State = 370;
			iListBegin();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 371;
				Match(Space);
				State = 372;
				requiredText();
				}
			}

			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 375;
				list2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List1Context list1() {
			return GetRuleContext<List1Context>(0);
		}
		public IListItem0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem0Context iListItem0() {
		IListItem0Context _localctx = new IListItem0Context(Context, State);
		EnterRule(_localctx, 52, RULE_iListItem0);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(Newline);
			State = 379;
			iListBegin();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 380;
				Match(Space);
				State = 381;
				requiredText();
				}
			}

			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 384;
				list1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash() { return GetToken(MarkdownParser.Dash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MarkdownParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(MarkdownParser.Star, 0); }
		public IListBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterIListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitIListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListBeginContext iListBegin() {
		IListBeginContext _localctx = new IListBeginContext(Context, State);
		EnterRule(_localctx, 54, RULE_iListBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem3Context[] eListItem3() {
			return GetRuleContexts<EListItem3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem3Context eListItem3(int i) {
			return GetRuleContext<EListItem3Context>(i);
		}
		public EList3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList3Context eList3() {
		EList3Context _localctx = new EList3Context(Context, State);
		EnterRule(_localctx, 56, RULE_eList3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 389;
					eListItem3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem2Context[] eListItem2() {
			return GetRuleContexts<EListItem2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem2Context eListItem2(int i) {
			return GetRuleContext<EListItem2Context>(i);
		}
		public EList2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList2Context eList2() {
		EList2Context _localctx = new EList2Context(Context, State);
		EnterRule(_localctx, 58, RULE_eList2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 394;
					eListItem2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem1Context[] eListItem1() {
			return GetRuleContexts<EListItem1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem1Context eListItem1(int i) {
			return GetRuleContext<EListItem1Context>(i);
		}
		public EList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList1Context eList1() {
		EList1Context _localctx = new EList1Context(Context, State);
		EnterRule(_localctx, 60, RULE_eList1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 399;
					eListItem1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem0Context[] eListItem0() {
			return GetRuleContexts<EListItem0Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem0Context eListItem0(int i) {
			return GetRuleContext<EListItem0Context>(i);
		}
		public EList0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList0Context eList0() {
		EList0Context _localctx = new EList0Context(Context, State);
		EnterRule(_localctx, 62, RULE_eList0);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 404;
					eListItem0();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent3Context indent3() {
			return GetRuleContext<Indent3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public EListItem3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem3Context eListItem3() {
		EListItem3Context _localctx = new EListItem3Context(Context, State);
		EnterRule(_localctx, 64, RULE_eListItem3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			indent3();
			State = 410;
			eListBegin();
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 411;
				Match(Space);
				State = 412;
				requiredText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent2Context indent2() {
			return GetRuleContext<Indent2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List3Context list3() {
			return GetRuleContext<List3Context>(0);
		}
		public EListItem2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem2Context eListItem2() {
		EListItem2Context _localctx = new EListItem2Context(Context, State);
		EnterRule(_localctx, 66, RULE_eListItem2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			indent2();
			State = 416;
			eListBegin();
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 417;
				Match(Space);
				State = 418;
				requiredText();
				}
			}

			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 421;
				list3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List2Context list2() {
			return GetRuleContext<List2Context>(0);
		}
		public EListItem1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem1Context eListItem1() {
		EListItem1Context _localctx = new EListItem1Context(Context, State);
		EnterRule(_localctx, 68, RULE_eListItem1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			indent1();
			State = 425;
			eListBegin();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 426;
				Match(Space);
				State = 427;
				requiredText();
				}
			}

			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 430;
				list2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List1Context list1() {
			return GetRuleContext<List1Context>(0);
		}
		public EListItem0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem0Context eListItem0() {
		EListItem0Context _localctx = new EListItem0Context(Context, State);
		EnterRule(_localctx, 70, RULE_eListItem0);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(Newline);
			State = 434;
			eListBegin();
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 435;
				Match(Space);
				State = 436;
				requiredText();
				}
			}

			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 439;
				list1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MarkdownParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MarkdownParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Digit() { return GetTokens(MarkdownParser.Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digit(int i) {
			return GetToken(MarkdownParser.Digit, i);
		}
		public EListBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListBeginContext eListBegin() {
		EListBeginContext _localctx = new EListBeginContext(Context, State);
		EnterRule(_localctx, 72, RULE_eListBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 442;
				Match(Digit);
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Digit );
			State = 447;
			_la = TokenStream.LA(1);
			if ( !(_la==RPAREN || _la==Dot) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteLineContext[] blockQuoteLine() {
			return GetRuleContexts<BlockQuoteLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteLineContext blockQuoteLine(int i) {
			return GetRuleContext<BlockQuoteLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockQuoteLineContext[] emptyBlockQuoteLine() {
			return GetRuleContexts<EmptyBlockQuoteLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockQuoteLineContext emptyBlockQuoteLine(int i) {
			return GetRuleContext<EmptyBlockQuoteLineContext>(i);
		}
		public BlockQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterBlockQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitBlockQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteContext blockQuote() {
		BlockQuoteContext _localctx = new BlockQuoteContext(Context, State);
		EnterRule(_localctx, 74, RULE_blockQuote);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 451;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
					case 1:
						{
						State = 449;
						blockQuoteLine();
						}
						break;
					case 2:
						{
						State = 450;
						emptyBlockQuoteLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteStartContext blockQuoteStart() {
			return GetRuleContext<BlockQuoteStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(MarkdownParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public BlockQuoteLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteLineContext blockQuoteLine() {
		BlockQuoteLineContext _localctx = new BlockQuoteLineContext(Context, State);
		EnterRule(_localctx, 76, RULE_blockQuoteLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			blockQuoteStart();
			State = 456;
			Match(Space);
			State = 457;
			requiredText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyBlockQuoteLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteStartContext blockQuoteStart() {
			return GetRuleContext<BlockQuoteStartContext>(0);
		}
		public EmptyBlockQuoteLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyBlockQuoteLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterEmptyBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitEmptyBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyBlockQuoteLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyBlockQuoteLineContext emptyBlockQuoteLine() {
		EmptyBlockQuoteLineContext _localctx = new EmptyBlockQuoteLineContext(Context, State);
		EnterRule(_localctx, 78, RULE_emptyBlockQuoteLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			blockQuoteStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MarkdownParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MarkdownParser.GT, i);
		}
		public BlockQuoteStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterBlockQuoteStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitBlockQuoteStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteStartContext blockQuoteStart() {
		BlockQuoteStartContext _localctx = new BlockQuoteStartContext(Context, State);
		EnterRule(_localctx, 80, RULE_blockQuoteStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(Newline);
			State = 462;
			Match(GT);
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 463;
				Match(GT);
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GT) {
					{
					State = 464;
					Match(GT);
					State = 472;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==GT) {
						{
						State = 465;
						Match(GT);
						State = 470;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==GT) {
							{
							State = 466;
							Match(GT);
							State = 468;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==GT) {
								{
								State = 467;
								Match(GT);
								}
							}

							}
						}

						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderRowContext headerRow() {
			return GetRuleContext<HeaderRowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorRowContext separatorRow() {
			return GetRuleContext<SeparatorRowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentRowContext[] contentRow() {
			return GetRuleContexts<ContentRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentRowContext contentRow(int i) {
			return GetRuleContext<ContentRowContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 82, RULE_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(Newline);
			State = 479;
			headerRow();
			State = 480;
			Match(Newline);
			State = 481;
			separatorRow();
			State = 482;
			Match(Newline);
			State = 483;
			contentRow();
			State = 488;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 484;
					Match(Newline);
					State = 485;
					contentRow();
					}
					} 
				}
				State = 490;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			State = 491;
			Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(MarkdownParser.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(MarkdownParser.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext[] cellContent() {
			return GetRuleContexts<CellContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext cellContent(int i) {
			return GetRuleContext<CellContentContext>(i);
		}
		public HeaderRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headerRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHeaderRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHeaderRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderRowContext headerRow() {
		HeaderRowContext _localctx = new HeaderRowContext(Context, State);
		EnterRule(_localctx, 84, RULE_headerRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(Pipe);
			State = 494;
			cellContent();
			State = 499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 495;
					Match(Pipe);
					State = 496;
					cellContent();
					}
					} 
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 502;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(MarkdownParser.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(MarkdownParser.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext[] cellContent() {
			return GetRuleContexts<CellContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext cellContent(int i) {
			return GetRuleContext<CellContentContext>(i);
		}
		public ContentRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contentRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterContentRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitContentRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContentRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentRowContext contentRow() {
		ContentRowContext _localctx = new ContentRowContext(Context, State);
		EnterRule(_localctx, 86, RULE_contentRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(Pipe);
			State = 505;
			cellContent();
			State = 510;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 506;
					Match(Pipe);
					State = 507;
					cellContent();
					}
					} 
				}
				State = 512;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 513;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(MarkdownParser.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(MarkdownParser.Pipe, i);
		}
		public CellContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterCellContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitCellContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContentContext cellContent() {
		CellContentContext _localctx = new CellContentContext(Context, State);
		EnterRule(_localctx, 88, RULE_cellContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018427387908L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				{
				State = 515;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==Pipe) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(MarkdownParser.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(MarkdownParser.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorContentContext[] separatorContent() {
			return GetRuleContexts<SeparatorContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorContentContext separatorContent(int i) {
			return GetRuleContext<SeparatorContentContext>(i);
		}
		public SeparatorRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterSeparatorRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitSeparatorRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorRowContext separatorRow() {
		SeparatorRowContext _localctx = new SeparatorRowContext(Context, State);
		EnterRule(_localctx, 90, RULE_separatorRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(Pipe);
			State = 522;
			separatorContent();
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 523;
					Match(Pipe);
					State = 524;
					separatorContent();
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			State = 530;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(MarkdownParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(MarkdownParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(MarkdownParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(MarkdownParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(MarkdownParser.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(MarkdownParser.Dash, i);
		}
		public SeparatorContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterSeparatorContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitSeparatorContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorContentContext separatorContent() {
		SeparatorContentContext _localctx = new SeparatorContentContext(Context, State);
		EnterRule(_localctx, 92, RULE_separatorContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 532;
				Match(Space);
				}
			}

			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 535;
				Match(Colon);
				}
			}

			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 538;
				Match(Dash);
				}
				}
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Dash );
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 543;
				Match(Colon);
				}
			}

			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 546;
				Match(Space);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImageLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(MarkdownParser.Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MarkdownParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextContext displayText() {
			return GetRuleContext<DisplayTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MarkdownParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MarkdownParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MarkdownParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public ImageLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imageLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterImageLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitImageLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImageLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImageLineContext imageLine() {
		ImageLineContext _localctx = new ImageLineContext(Context, State);
		EnterRule(_localctx, 94, RULE_imageLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(Newline);
			State = 550;
			Match(Exclamation);
			State = 551;
			Match(LBRACKET);
			State = 552;
			displayText();
			State = 553;
			Match(RBRACKET);
			State = 554;
			Match(LPAREN);
			State = 555;
			linkText();
			State = 556;
			Match(RPAREN);
			State = 557;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(MarkdownParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterTextLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitTextLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(Context, State);
		EnterRule(_localctx, 96, RULE_textLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(Newline);
			State = 560;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		public RequiredTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterRequiredText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitRequiredText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredTextContext requiredText() {
		RequiredTextContext _localctx = new RequiredTextContext(Context, State);
		EnterRule(_localctx, 98, RULE_requiredText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 562;
					link();
					}
					break;
				case 2:
					{
					State = 563;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Newline) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		public OptionalTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterOptionalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitOptionalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalTextContext optionalText() {
		OptionalTextContext _localctx = new OptionalTextContext(Context, State);
		EnterRule(_localctx, 100, RULE_optionalText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				State = 570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 568;
					link();
					}
					break;
				case 2:
					{
					State = 569;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Newline) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(MarkdownParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(MarkdownParser.RBRACKET, i);
		}
		public DisplayTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterDisplayText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitDisplayText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayTextContext displayText() {
		DisplayTextContext _localctx = new DisplayTextContext(Context, State);
		EnterRule(_localctx, 102, RULE_displayText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 575;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==RBRACKET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -137438953476L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(MarkdownParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(MarkdownParser.RPAREN, i);
		}
		public LinkTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterLinkText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitLinkText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextContext linkText() {
		LinkTextContext _localctx = new LinkTextContext(Context, State);
		EnterRule(_localctx, 104, RULE_linkText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 580;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==RPAREN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -549755813892L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MarkdownParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MarkdownParser.GT, i);
		}
		public UrlTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterUrlText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitUrlText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlTextContext urlText() {
		UrlTextContext _localctx = new UrlTextContext(Context, State);
		EnterRule(_localctx, 106, RULE_urlText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 585;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==GT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8796093022212L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(MarkdownParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(MarkdownParser.Newline, i);
		}
		public HeadingTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterHeadingText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitHeadingText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextContext headingText() {
		HeadingTextContext _localctx = new HeadingTextContext(Context, State);
		EnterRule(_localctx, 108, RULE_headingText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 592;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						State = 590;
						link();
						}
						break;
					case 2:
						{
						State = 591;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==Newline) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlLinkContext urlLink() {
			return GetRuleContext<UrlLinkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLinkContext textLink() {
			return GetRuleContext<TextLinkContext>(0);
		}
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(Context, State);
		EnterRule(_localctx, 110, RULE_link);
		try {
			State = 598;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 596;
				urlLink();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 597;
				textLink();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MarkdownParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlTextContext urlText() {
			return GetRuleContext<UrlTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MarkdownParser.GT, 0); }
		public UrlLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterUrlLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitUrlLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlLinkContext urlLink() {
		UrlLinkContext _localctx = new UrlLinkContext(Context, State);
		EnterRule(_localctx, 112, RULE_urlLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(LT);
			State = 601;
			urlText();
			State = 602;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MarkdownParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextContext displayText() {
			return GetRuleContext<DisplayTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MarkdownParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MarkdownParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MarkdownParser.RPAREN, 0); }
		public TextLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.EnterTextLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownParserListener typedListener = listener as IMarkdownParserListener;
			if (typedListener != null) typedListener.ExitTextLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownParserVisitor<TResult> typedVisitor = visitor as IMarkdownParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLinkContext textLink() {
		TextLinkContext _localctx = new TextLinkContext(Context, State);
		EnterRule(_localctx, 114, RULE_textLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(LBRACKET);
			State = 605;
			displayText();
			State = 606;
			Match(RBRACKET);
			State = 607;
			Match(LPAREN);
			State = 608;
			linkText();
			State = 609;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,69,612,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,126,8,0,10,0,12,0,129,
		9,0,1,1,1,1,3,1,133,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,4,3,142,8,3,11,3,12,
		3,143,3,3,146,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,155,8,4,3,4,157,8,4,
		3,4,159,8,4,3,4,161,8,4,3,4,163,8,4,1,5,1,5,5,5,167,8,5,10,5,12,5,170,
		9,5,1,5,1,5,1,5,1,5,5,5,176,8,5,10,5,12,5,179,9,5,1,5,1,5,1,5,1,5,5,5,
		185,8,5,10,5,12,5,188,9,5,1,5,1,5,3,5,192,8,5,1,6,1,6,1,6,5,6,197,8,6,
		10,6,12,6,200,9,6,1,6,1,6,5,6,204,8,6,10,6,12,6,207,9,6,1,6,1,6,1,7,1,
		7,1,7,5,7,214,8,7,10,7,12,7,217,9,7,1,7,1,7,5,7,221,8,7,10,7,12,7,224,
		9,7,1,7,1,7,1,8,1,8,1,8,5,8,231,8,8,10,8,12,8,234,9,8,1,8,1,8,5,8,238,
		8,8,10,8,12,8,241,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,5,12,280,8,12,10,12,
		12,12,283,9,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,294,8,
		12,10,12,12,12,297,9,12,1,12,1,12,1,12,1,12,3,12,303,8,12,1,13,1,13,1,
		13,3,13,308,8,13,1,13,5,13,311,8,13,10,13,12,13,314,9,13,1,14,1,14,1,14,
		1,15,1,15,3,15,321,8,15,1,16,1,16,3,16,325,8,16,1,17,1,17,3,17,329,8,17,
		1,18,1,18,3,18,333,8,18,1,19,4,19,336,8,19,11,19,12,19,337,1,20,4,20,341,
		8,20,11,20,12,20,342,1,21,4,21,346,8,21,11,21,12,21,347,1,22,4,22,351,
		8,22,11,22,12,22,352,1,23,1,23,1,23,1,23,3,23,359,8,23,1,24,1,24,1,24,
		1,24,3,24,365,8,24,1,24,3,24,368,8,24,1,25,1,25,1,25,1,25,3,25,374,8,25,
		1,25,3,25,377,8,25,1,26,1,26,1,26,1,26,3,26,383,8,26,1,26,3,26,386,8,26,
		1,27,1,27,1,28,4,28,391,8,28,11,28,12,28,392,1,29,4,29,396,8,29,11,29,
		12,29,397,1,30,4,30,401,8,30,11,30,12,30,402,1,31,4,31,406,8,31,11,31,
		12,31,407,1,32,1,32,1,32,1,32,3,32,414,8,32,1,33,1,33,1,33,1,33,3,33,420,
		8,33,1,33,3,33,423,8,33,1,34,1,34,1,34,1,34,3,34,429,8,34,1,34,3,34,432,
		8,34,1,35,1,35,1,35,1,35,3,35,438,8,35,1,35,3,35,441,8,35,1,36,4,36,444,
		8,36,11,36,12,36,445,1,36,1,36,1,37,1,37,4,37,452,8,37,11,37,12,37,453,
		1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
		469,8,40,3,40,471,8,40,3,40,473,8,40,3,40,475,8,40,3,40,477,8,40,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,487,8,41,10,41,12,41,490,9,41,
		1,41,1,41,1,42,1,42,1,42,1,42,5,42,498,8,42,10,42,12,42,501,9,42,1,42,
		1,42,1,43,1,43,1,43,1,43,5,43,509,8,43,10,43,12,43,512,9,43,1,43,1,43,
		1,44,5,44,517,8,44,10,44,12,44,520,9,44,1,45,1,45,1,45,1,45,5,45,526,8,
		45,10,45,12,45,529,9,45,1,45,1,45,1,46,3,46,534,8,46,1,46,3,46,537,8,46,
		1,46,4,46,540,8,46,11,46,12,46,541,1,46,3,46,545,8,46,1,46,3,46,548,8,
		46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,
		49,1,49,4,49,565,8,49,11,49,12,49,566,1,50,1,50,5,50,571,8,50,10,50,12,
		50,574,9,50,1,51,4,51,577,8,51,11,51,12,51,578,1,52,4,52,582,8,52,11,52,
		12,52,583,1,53,4,53,587,8,53,11,53,12,53,588,1,54,1,54,4,54,593,8,54,11,
		54,12,54,594,1,55,1,55,3,55,599,8,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,3,281,295,594,0,58,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,0,10,2,0,2,2,64,64,2,0,2,2,61,61,2,0,2,2,65,65,1,0,64,66,2,0,39,39,
		44,44,2,0,1,1,62,62,1,0,1,1,2,0,1,1,37,37,2,0,1,1,39,39,2,0,1,1,43,43,
		640,0,127,1,0,0,0,2,132,1,0,0,0,4,134,1,0,0,0,6,136,1,0,0,0,8,147,1,0,
		0,0,10,191,1,0,0,0,12,193,1,0,0,0,14,210,1,0,0,0,16,227,1,0,0,0,18,244,
		1,0,0,0,20,258,1,0,0,0,22,268,1,0,0,0,24,302,1,0,0,0,26,304,1,0,0,0,28,
		315,1,0,0,0,30,320,1,0,0,0,32,324,1,0,0,0,34,328,1,0,0,0,36,332,1,0,0,
		0,38,335,1,0,0,0,40,340,1,0,0,0,42,345,1,0,0,0,44,350,1,0,0,0,46,354,1,
		0,0,0,48,360,1,0,0,0,50,369,1,0,0,0,52,378,1,0,0,0,54,387,1,0,0,0,56,390,
		1,0,0,0,58,395,1,0,0,0,60,400,1,0,0,0,62,405,1,0,0,0,64,409,1,0,0,0,66,
		415,1,0,0,0,68,424,1,0,0,0,70,433,1,0,0,0,72,443,1,0,0,0,74,451,1,0,0,
		0,76,455,1,0,0,0,78,459,1,0,0,0,80,461,1,0,0,0,82,478,1,0,0,0,84,493,1,
		0,0,0,86,504,1,0,0,0,88,518,1,0,0,0,90,521,1,0,0,0,92,533,1,0,0,0,94,549,
		1,0,0,0,96,559,1,0,0,0,98,564,1,0,0,0,100,572,1,0,0,0,102,576,1,0,0,0,
		104,581,1,0,0,0,106,586,1,0,0,0,108,592,1,0,0,0,110,598,1,0,0,0,112,600,
		1,0,0,0,114,604,1,0,0,0,116,126,3,2,1,0,117,126,3,10,5,0,118,126,3,24,
		12,0,119,126,3,26,13,0,120,126,3,30,15,0,121,126,3,74,37,0,122,126,3,82,
		41,0,123,126,3,94,47,0,124,126,3,96,48,0,125,116,1,0,0,0,125,117,1,0,0,
		0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,0,125,121,1,0,0,0,125,
		122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,
		0,0,0,127,128,1,0,0,0,128,1,1,0,0,0,129,127,1,0,0,0,130,133,3,6,3,0,131,
		133,3,4,2,0,132,130,1,0,0,0,132,131,1,0,0,0,133,3,1,0,0,0,134,135,3,8,
		4,0,135,5,1,0,0,0,136,137,3,8,4,0,137,138,5,2,0,0,138,145,3,108,54,0,139,
		141,5,2,0,0,140,142,5,52,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,
		0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,139,1,0,0,0,145,146,1,0,0,0,
		146,7,1,0,0,0,147,148,5,1,0,0,148,162,5,52,0,0,149,160,5,52,0,0,150,158,
		5,52,0,0,151,156,5,52,0,0,152,154,5,52,0,0,153,155,5,52,0,0,154,153,1,
		0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,152,1,0,0,0,156,157,1,0,0,0,
		157,159,1,0,0,0,158,151,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,150,
		1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,149,1,0,0,0,162,163,1,0,0,
		0,163,9,1,0,0,0,164,168,3,12,6,0,165,167,7,0,0,0,166,165,1,0,0,0,167,170,
		1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,
		0,171,172,5,1,0,0,172,192,1,0,0,0,173,177,3,14,7,0,174,176,7,1,0,0,175,
		174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,
		0,0,0,179,177,1,0,0,0,180,181,5,1,0,0,181,192,1,0,0,0,182,186,3,16,8,0,
		183,185,7,2,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,
		1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,5,1,0,0,190,192,1,0,0,
		0,191,164,1,0,0,0,191,173,1,0,0,0,191,182,1,0,0,0,192,11,1,0,0,0,193,194,
		5,1,0,0,194,198,5,64,0,0,195,197,5,2,0,0,196,195,1,0,0,0,197,200,1,0,0,
		0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,
		205,5,64,0,0,202,204,5,2,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,
		0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,64,0,0,
		209,13,1,0,0,0,210,211,5,1,0,0,211,215,5,61,0,0,212,214,5,2,0,0,213,212,
		1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,
		0,217,215,1,0,0,0,218,222,5,61,0,0,219,221,5,2,0,0,220,219,1,0,0,0,221,
		224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,
		0,0,0,225,226,5,61,0,0,226,15,1,0,0,0,227,228,5,1,0,0,228,232,5,65,0,0,
		229,231,5,2,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,
		1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,239,5,65,0,0,236,238,5,2,0,
		0,237,236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,
		242,1,0,0,0,241,239,1,0,0,0,242,243,5,65,0,0,243,17,1,0,0,0,244,245,5,
		1,0,0,245,246,5,2,0,0,246,247,5,2,0,0,247,248,5,2,0,0,248,249,5,2,0,0,
		249,250,5,2,0,0,250,251,5,2,0,0,251,252,5,2,0,0,252,253,5,2,0,0,253,254,
		5,2,0,0,254,255,5,2,0,0,255,256,5,2,0,0,256,257,5,2,0,0,257,19,1,0,0,0,
		258,259,5,1,0,0,259,260,5,2,0,0,260,261,5,2,0,0,261,262,5,2,0,0,262,263,
		5,2,0,0,263,264,5,2,0,0,264,265,5,2,0,0,265,266,5,2,0,0,266,267,5,2,0,
		0,267,21,1,0,0,0,268,269,5,1,0,0,269,270,5,2,0,0,270,271,5,2,0,0,271,272,
		5,2,0,0,272,273,5,2,0,0,273,23,1,0,0,0,274,275,5,1,0,0,275,276,5,67,0,
		0,276,277,5,67,0,0,277,281,5,67,0,0,278,280,9,0,0,0,279,278,1,0,0,0,280,
		283,1,0,0,0,281,282,1,0,0,0,281,279,1,0,0,0,282,284,1,0,0,0,283,281,1,
		0,0,0,284,285,5,67,0,0,285,286,5,67,0,0,286,287,5,67,0,0,287,303,3,100,
		50,0,288,289,5,1,0,0,289,290,5,63,0,0,290,291,5,63,0,0,291,295,5,63,0,
		0,292,294,9,0,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,296,1,0,0,0,295,
		293,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,5,63,0,0,299,300,5,
		63,0,0,300,301,5,63,0,0,301,303,3,100,50,0,302,274,1,0,0,0,302,288,1,0,
		0,0,303,25,1,0,0,0,304,305,5,1,0,0,305,312,3,28,14,0,306,308,5,1,0,0,307,
		306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,311,3,28,14,0,310,307,
		1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,27,1,0,0,0,
		314,312,1,0,0,0,315,316,3,22,11,0,316,317,3,98,49,0,317,29,1,0,0,0,318,
		321,3,44,22,0,319,321,3,62,31,0,320,318,1,0,0,0,320,319,1,0,0,0,321,31,
		1,0,0,0,322,325,3,42,21,0,323,325,3,60,30,0,324,322,1,0,0,0,324,323,1,
		0,0,0,325,33,1,0,0,0,326,329,3,40,20,0,327,329,3,58,29,0,328,326,1,0,0,
		0,328,327,1,0,0,0,329,35,1,0,0,0,330,333,3,38,19,0,331,333,3,56,28,0,332,
		330,1,0,0,0,332,331,1,0,0,0,333,37,1,0,0,0,334,336,3,46,23,0,335,334,1,
		0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,39,1,0,0,0,339,
		341,3,48,24,0,340,339,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,
		1,0,0,0,343,41,1,0,0,0,344,346,3,50,25,0,345,344,1,0,0,0,346,347,1,0,0,
		0,347,345,1,0,0,0,347,348,1,0,0,0,348,43,1,0,0,0,349,351,3,52,26,0,350,
		349,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,45,1,0,
		0,0,354,355,3,18,9,0,355,358,3,54,27,0,356,357,5,2,0,0,357,359,3,98,49,
		0,358,356,1,0,0,0,358,359,1,0,0,0,359,47,1,0,0,0,360,361,3,20,10,0,361,
		364,3,54,27,0,362,363,5,2,0,0,363,365,3,98,49,0,364,362,1,0,0,0,364,365,
		1,0,0,0,365,367,1,0,0,0,366,368,3,36,18,0,367,366,1,0,0,0,367,368,1,0,
		0,0,368,49,1,0,0,0,369,370,3,22,11,0,370,373,3,54,27,0,371,372,5,2,0,0,
		372,374,3,98,49,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,
		377,3,34,17,0,376,375,1,0,0,0,376,377,1,0,0,0,377,51,1,0,0,0,378,379,5,
		1,0,0,379,382,3,54,27,0,380,381,5,2,0,0,381,383,3,98,49,0,382,380,1,0,
		0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,386,3,32,16,0,385,384,1,0,0,0,
		385,386,1,0,0,0,386,53,1,0,0,0,387,388,7,3,0,0,388,55,1,0,0,0,389,391,
		3,64,32,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,
		0,0,393,57,1,0,0,0,394,396,3,66,33,0,395,394,1,0,0,0,396,397,1,0,0,0,397,
		395,1,0,0,0,397,398,1,0,0,0,398,59,1,0,0,0,399,401,3,68,34,0,400,399,1,
		0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,61,1,0,0,0,404,
		406,3,70,35,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,
		1,0,0,0,408,63,1,0,0,0,409,410,3,18,9,0,410,413,3,72,36,0,411,412,5,2,
		0,0,412,414,3,98,49,0,413,411,1,0,0,0,413,414,1,0,0,0,414,65,1,0,0,0,415,
		416,3,20,10,0,416,419,3,72,36,0,417,418,5,2,0,0,418,420,3,98,49,0,419,
		417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,423,3,36,18,0,422,421,
		1,0,0,0,422,423,1,0,0,0,423,67,1,0,0,0,424,425,3,22,11,0,425,428,3,72,
		36,0,426,427,5,2,0,0,427,429,3,98,49,0,428,426,1,0,0,0,428,429,1,0,0,0,
		429,431,1,0,0,0,430,432,3,34,17,0,431,430,1,0,0,0,431,432,1,0,0,0,432,
		69,1,0,0,0,433,434,5,1,0,0,434,437,3,72,36,0,435,436,5,2,0,0,436,438,3,
		98,49,0,437,435,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,441,3,32,16,
		0,440,439,1,0,0,0,440,441,1,0,0,0,441,71,1,0,0,0,442,444,5,68,0,0,443,
		442,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,1,
		0,0,0,447,448,7,4,0,0,448,73,1,0,0,0,449,452,3,76,38,0,450,452,3,78,39,
		0,451,449,1,0,0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,453,
		454,1,0,0,0,454,75,1,0,0,0,455,456,3,80,40,0,456,457,5,2,0,0,457,458,3,
		98,49,0,458,77,1,0,0,0,459,460,3,80,40,0,460,79,1,0,0,0,461,462,5,1,0,
		0,462,476,5,43,0,0,463,474,5,43,0,0,464,472,5,43,0,0,465,470,5,43,0,0,
		466,468,5,43,0,0,467,469,5,43,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,
		471,1,0,0,0,470,466,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,465,1,
		0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,464,1,0,0,0,474,475,1,0,0,0,
		475,477,1,0,0,0,476,463,1,0,0,0,476,477,1,0,0,0,477,81,1,0,0,0,478,479,
		5,1,0,0,479,480,3,84,42,0,480,481,5,1,0,0,481,482,3,90,45,0,482,483,5,
		1,0,0,483,488,3,86,43,0,484,485,5,1,0,0,485,487,3,86,43,0,486,484,1,0,
		0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,
		488,1,0,0,0,491,492,5,1,0,0,492,83,1,0,0,0,493,494,5,62,0,0,494,499,3,
		88,44,0,495,496,5,62,0,0,496,498,3,88,44,0,497,495,1,0,0,0,498,501,1,0,
		0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,
		503,5,62,0,0,503,85,1,0,0,0,504,505,5,62,0,0,505,510,3,88,44,0,506,507,
		5,62,0,0,507,509,3,88,44,0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,
		0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,510,1,0,0,0,513,514,5,62,0,0,514,
		87,1,0,0,0,515,517,8,5,0,0,516,515,1,0,0,0,517,520,1,0,0,0,518,516,1,0,
		0,0,518,519,1,0,0,0,519,89,1,0,0,0,520,518,1,0,0,0,521,522,5,62,0,0,522,
		527,3,92,46,0,523,524,5,62,0,0,524,526,3,92,46,0,525,523,1,0,0,0,526,529,
		1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,527,1,0,0,
		0,530,531,5,62,0,0,531,91,1,0,0,0,532,534,5,2,0,0,533,532,1,0,0,0,533,
		534,1,0,0,0,534,536,1,0,0,0,535,537,5,47,0,0,536,535,1,0,0,0,536,537,1,
		0,0,0,537,539,1,0,0,0,538,540,5,64,0,0,539,538,1,0,0,0,540,541,1,0,0,0,
		541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,545,5,47,0,0,544,543,
		1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,5,2,0,0,547,546,1,0,0,
		0,547,548,1,0,0,0,548,93,1,0,0,0,549,550,5,1,0,0,550,551,5,49,0,0,551,
		552,5,36,0,0,552,553,3,102,51,0,553,554,5,37,0,0,554,555,5,38,0,0,555,
		556,3,104,52,0,556,557,5,39,0,0,557,558,3,100,50,0,558,95,1,0,0,0,559,
		560,5,1,0,0,560,561,3,100,50,0,561,97,1,0,0,0,562,565,3,110,55,0,563,565,
		8,6,0,0,564,562,1,0,0,0,564,563,1,0,0,0,565,566,1,0,0,0,566,564,1,0,0,
		0,566,567,1,0,0,0,567,99,1,0,0,0,568,571,3,110,55,0,569,571,8,6,0,0,570,
		568,1,0,0,0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,
		0,0,0,573,101,1,0,0,0,574,572,1,0,0,0,575,577,8,7,0,0,576,575,1,0,0,0,
		577,578,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,103,1,0,0,0,580,582,
		8,8,0,0,581,580,1,0,0,0,582,583,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,
		0,584,105,1,0,0,0,585,587,8,9,0,0,586,585,1,0,0,0,587,588,1,0,0,0,588,
		586,1,0,0,0,588,589,1,0,0,0,589,107,1,0,0,0,590,593,3,110,55,0,591,593,
		8,6,0,0,592,590,1,0,0,0,592,591,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,
		0,594,592,1,0,0,0,595,109,1,0,0,0,596,599,3,112,56,0,597,599,3,114,57,
		0,598,596,1,0,0,0,598,597,1,0,0,0,599,111,1,0,0,0,600,601,5,42,0,0,601,
		602,3,106,53,0,602,603,5,43,0,0,603,113,1,0,0,0,604,605,5,36,0,0,605,606,
		3,102,51,0,606,607,5,37,0,0,607,608,5,38,0,0,608,609,3,104,52,0,609,610,
		5,39,0,0,610,115,1,0,0,0,79,125,127,132,143,145,154,156,158,160,162,168,
		177,186,191,198,205,215,222,232,239,281,295,302,307,312,320,324,328,332,
		337,342,347,352,358,364,367,373,376,382,385,392,397,402,407,413,419,422,
		428,431,437,440,445,451,453,468,470,472,474,476,488,499,510,518,527,533,
		536,541,544,547,564,566,570,572,578,583,588,592,594,598
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MarkdownParsing
