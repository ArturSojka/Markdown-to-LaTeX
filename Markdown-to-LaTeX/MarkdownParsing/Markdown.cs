//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/artur/RiderProjects/Markdown-to-LaTeX/Markdown-to-LaTeX/Markdown.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MarkdownParsing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Markdown : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Newline=1, Space=2, Tab=3, EscExclamation=4, EscDoubleQuote=5, EscSharp=6, 
		EscDolar=7, EscPercent=8, EscAmp=9, EscQuote=10, EscLPAREN=11, EscRPAREN=12, 
		EscStar=13, EscPlus=14, EscComma=15, EscDash=16, EscDot=17, EscSlash=18, 
		EscColon=19, EscSemicilon=20, EscLT=21, EscEqual=22, EscGT=23, EscQuestion=24, 
		EscAt=25, EscLBRACKET=26, EscBackslash=27, EscRBRACKET=28, EscCarrot=29, 
		EscUnderscore=30, EscCode=31, EscLBRACE=32, EscPipe=33, EscRBRACE=34, 
		EscTilde=35, LBRACKET=36, RBRACKET=37, LPAREN=38, RPAREN=39, LBRACE=40, 
		RBRACE=41, LT=42, GT=43, Dot=44, Slash=45, Backslash=46, Colon=47, Semicolon=48, 
		Exclamation=49, Quote=50, DoubleQuote=51, Sharp=52, Dolar=53, Percent=54, 
		Amp=55, Comma=56, Equal=57, Question=58, At=59, Carrot=60, Underscore=61, 
		Pipe=62, Tilde=63, Dash=64, Star=65, Plus=66, Code=67, Digit=68, Other=69;
	public const int
		RULE_document = 0, RULE_heading = 1, RULE_headingStart = 2, RULE_setextEnd = 3, 
		RULE_horizontalLine = 4, RULE_hLineDBegin = 5, RULE_hLineUBegin = 6, RULE_hLineSBegin = 7, 
		RULE_indent3 = 8, RULE_indent2 = 9, RULE_indent1 = 10, RULE_fencedCode = 11, 
		RULE_indentedCodeBlock = 12, RULE_indentedCode1 = 13, RULE_list = 14, 
		RULE_list1 = 15, RULE_list2 = 16, RULE_list3 = 17, RULE_iList3 = 18, RULE_iList2 = 19, 
		RULE_iList1 = 20, RULE_iList0 = 21, RULE_iListItem3 = 22, RULE_iListItem2 = 23, 
		RULE_iListItem1 = 24, RULE_iListItem0 = 25, RULE_iListBegin = 26, RULE_eList3 = 27, 
		RULE_eList2 = 28, RULE_eList1 = 29, RULE_eList0 = 30, RULE_eListItem3 = 31, 
		RULE_eListItem2 = 32, RULE_eListItem1 = 33, RULE_eListItem0 = 34, RULE_eListBegin = 35, 
		RULE_blockQuote = 36, RULE_blockQuoteLine = 37, RULE_emptyBlockQuoteLine = 38, 
		RULE_blockQuoteStart = 39, RULE_table = 40, RULE_headerRow = 41, RULE_contentRow = 42, 
		RULE_cellContent = 43, RULE_separatorRow = 44, RULE_separatorContent = 45, 
		RULE_imageLine = 46, RULE_textLine = 47, RULE_requiredText = 48, RULE_optionalText = 49, 
		RULE_displayText = 50, RULE_linkText = 51, RULE_urlText = 52, RULE_headingText = 53, 
		RULE_fencedText = 54, RULE_link = 55, RULE_urlLink = 56, RULE_textLink = 57;
	public static readonly string[] ruleNames = {
		"document", "heading", "headingStart", "setextEnd", "horizontalLine", 
		"hLineDBegin", "hLineUBegin", "hLineSBegin", "indent3", "indent2", "indent1", 
		"fencedCode", "indentedCodeBlock", "indentedCode1", "list", "list1", "list2", 
		"list3", "iList3", "iList2", "iList1", "iList0", "iListItem3", "iListItem2", 
		"iListItem1", "iListItem0", "iListBegin", "eList3", "eList2", "eList1", 
		"eList0", "eListItem3", "eListItem2", "eListItem1", "eListItem0", "eListBegin", 
		"blockQuote", "blockQuoteLine", "emptyBlockQuoteLine", "blockQuoteStart", 
		"table", "headerRow", "contentRow", "cellContent", "separatorRow", "separatorContent", 
		"imageLine", "textLine", "requiredText", "optionalText", "displayText", 
		"linkText", "urlText", "headingText", "fencedText", "link", "urlLink", 
		"textLink"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "' '", "'\\t'", "'\\!'", "'\\\"'", "'\\#'", "'\\$'", "'\\%'", 
		"'\\&'", "'\\''", "'\\('", "'\\)'", "'\\*'", "'\\+'", "'\\,'", "'\\-'", 
		"'\\.'", "'\\/'", "'\\:'", "'\\;'", "'\\<'", "'\\='", "'\\>'", "'\\?'", 
		"'\\@'", "'\\['", "'\\\\'", "'\\]'", "'\\^'", "'\\_'", "'\\`'", "'\\{'", 
		"'\\|'", "'\\}'", "'\\~'", "'['", "']'", "'('", "')'", "'{'", "'}'", "'<'", 
		"'>'", "'.'", "'/'", "'\\'", "':'", "';'", "'!'", "'''", "'\"'", "'#'", 
		"'$'", "'%'", "'&'", "','", "'='", "'?'", "'@'", "'^'", "'_'", "'|'", 
		"'~'", "'-'", "'*'", "'+'", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Newline", "Space", "Tab", "EscExclamation", "EscDoubleQuote", "EscSharp", 
		"EscDolar", "EscPercent", "EscAmp", "EscQuote", "EscLPAREN", "EscRPAREN", 
		"EscStar", "EscPlus", "EscComma", "EscDash", "EscDot", "EscSlash", "EscColon", 
		"EscSemicilon", "EscLT", "EscEqual", "EscGT", "EscQuestion", "EscAt", 
		"EscLBRACKET", "EscBackslash", "EscRBRACKET", "EscCarrot", "EscUnderscore", 
		"EscCode", "EscLBRACE", "EscPipe", "EscRBRACE", "EscTilde", "LBRACKET", 
		"RBRACKET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "Dot", 
		"Slash", "Backslash", "Colon", "Semicolon", "Exclamation", "Quote", "DoubleQuote", 
		"Sharp", "Dolar", "Percent", "Amp", "Comma", "Equal", "Question", "At", 
		"Carrot", "Underscore", "Pipe", "Tilde", "Dash", "Star", "Plus", "Code", 
		"Digit", "Other"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Markdown.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Markdown() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Markdown(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Markdown(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Markdown.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext[] heading() {
			return GetRuleContexts<HeadingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext heading(int i) {
			return GetRuleContext<HeadingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HorizontalLineContext[] horizontalLine() {
			return GetRuleContexts<HorizontalLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HorizontalLineContext horizontalLine(int i) {
			return GetRuleContext<HorizontalLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedCodeContext[] fencedCode() {
			return GetRuleContexts<FencedCodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedCodeContext fencedCode(int i) {
			return GetRuleContext<FencedCodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCodeBlockContext[] indentedCodeBlock() {
			return GetRuleContexts<IndentedCodeBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCodeBlockContext indentedCodeBlock(int i) {
			return GetRuleContext<IndentedCodeBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext[] list() {
			return GetRuleContexts<ListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list(int i) {
			return GetRuleContext<ListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteContext[] blockQuote() {
			return GetRuleContexts<BlockQuoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteContext blockQuote(int i) {
			return GetRuleContext<BlockQuoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageLineContext[] imageLine() {
			return GetRuleContexts<ImageLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageLineContext imageLine(int i) {
			return GetRuleContext<ImageLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Newline) {
				{
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 116;
					heading();
					}
					break;
				case 2:
					{
					State = 117;
					horizontalLine();
					}
					break;
				case 3:
					{
					State = 118;
					fencedCode();
					}
					break;
				case 4:
					{
					State = 119;
					indentedCodeBlock();
					}
					break;
				case 5:
					{
					State = 120;
					list();
					}
					break;
				case 6:
					{
					State = 121;
					blockQuote();
					}
					break;
				case 7:
					{
					State = 122;
					table();
					}
					break;
				case 8:
					{
					State = 123;
					imageLine();
					}
					break;
				case 9:
					{
					State = 124;
					textLine();
					}
					break;
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
	 
		public HeadingContext() { }
		public virtual void CopyFrom(HeadingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetextHeadingContext : HeadingContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetextEndContext setextEnd() {
			return GetRuleContext<SetextEndContext>(0);
		}
		public SetextHeadingContext(HeadingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSetextHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSetextHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetextHeading(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyHeadingContext : HeadingContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingStartContext headingStart() {
			return GetRuleContext<HeadingStartContext>(0);
		}
		public EmptyHeadingContext(HeadingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEmptyHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEmptyHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyHeading(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtxHeadingContext : HeadingContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingStartContext headingStart() {
			return GetRuleContext<HeadingStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingTextContext headingText() {
			return GetRuleContext<HeadingTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sharp() { return GetTokens(Markdown.Sharp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp(int i) {
			return GetToken(Markdown.Sharp, i);
		}
		public AtxHeadingContext(HeadingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterAtxHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitAtxHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtxHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(Context, State);
		EnterRule(_localctx, 2, RULE_heading);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new AtxHeadingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				headingStart();
				State = 133;
				Match(Space);
				State = 134;
				headingText();
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Space) {
					{
					State = 135;
					Match(Space);
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 136;
						Match(Sharp);
						}
						}
						State = 139;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Sharp );
					}
				}

				}
				break;
			case 2:
				_localctx = new SetextHeadingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				Match(Newline);
				State = 144;
				requiredText();
				State = 145;
				setextEnd();
				}
				break;
			case 3:
				_localctx = new EmptyHeadingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 147;
				headingStart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sharp() { return GetTokens(Markdown.Sharp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp(int i) {
			return GetToken(Markdown.Sharp, i);
		}
		public HeadingStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHeadingStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHeadingStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingStartContext headingStart() {
		HeadingStartContext _localctx = new HeadingStartContext(Context, State);
		EnterRule(_localctx, 4, RULE_headingStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(Newline);
			State = 151;
			Match(Sharp);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sharp) {
				{
				State = 152;
				Match(Sharp);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sharp) {
					{
					State = 153;
					Match(Sharp);
					State = 161;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Sharp) {
						{
						State = 154;
						Match(Sharp);
						State = 159;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Sharp) {
							{
							State = 155;
							Match(Sharp);
							State = 157;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Sharp) {
								{
								State = 156;
								Match(Sharp);
								}
							}

							}
						}

						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetextEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(Markdown.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(Markdown.Equal, i);
		}
		public SetextEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setextEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSetextEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSetextEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetextEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetextEndContext setextEnd() {
		SetextEndContext _localctx = new SetextEndContext(Context, State);
		EnterRule(_localctx, 6, RULE_setextEnd);
		int _la;
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				Match(Newline);
				State = 168;
				Match(Dash);
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 169;
					Match(Dash);
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Dash );
				State = 174;
				Match(Newline);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(Newline);
				State = 176;
				Match(Equal);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 177;
					Match(Equal);
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Equal );
				State = 182;
				Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HLineDBeginContext hLineDBegin() {
			return GetRuleContext<HLineDBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HLineUBeginContext hLineUBegin() {
			return GetRuleContext<HLineUBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Underscore() { return GetTokens(Markdown.Underscore); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore(int i) {
			return GetToken(Markdown.Underscore, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HLineSBeginContext hLineSBegin() {
			return GetRuleContext<HLineSBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(Markdown.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(Markdown.Star, i);
		}
		public HorizontalLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHorizontalLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHorizontalLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalLineContext horizontalLine() {
		HorizontalLineContext _localctx = new HorizontalLineContext(Context, State);
		EnterRule(_localctx, 8, RULE_horizontalLine);
		int _la;
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				hLineDBegin();
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Dash) {
					{
					{
					State = 186;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Dash) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 192;
				Match(Newline);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				hLineUBegin();
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Underscore) {
					{
					{
					State = 195;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Underscore) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 201;
				Match(Newline);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				hLineSBegin();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Star) {
					{
					{
					State = 204;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Star) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 210;
				Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineDBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public HLineDBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineDBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHLineDBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHLineDBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineDBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineDBeginContext hLineDBegin() {
		HLineDBeginContext _localctx = new HLineDBeginContext(Context, State);
		EnterRule(_localctx, 10, RULE_hLineDBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(Newline);
			State = 215;
			Match(Dash);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 216;
				Match(Space);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222;
			Match(Dash);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 223;
				Match(Space);
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(Dash);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineUBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Underscore() { return GetTokens(Markdown.Underscore); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore(int i) {
			return GetToken(Markdown.Underscore, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public HLineUBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineUBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHLineUBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHLineUBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineUBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineUBeginContext hLineUBegin() {
		HLineUBeginContext _localctx = new HLineUBeginContext(Context, State);
		EnterRule(_localctx, 12, RULE_hLineUBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(Newline);
			State = 232;
			Match(Underscore);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 233;
				Match(Space);
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 239;
			Match(Underscore);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 240;
				Match(Space);
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineSBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(Markdown.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(Markdown.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public HLineSBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineSBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHLineSBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHLineSBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineSBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineSBeginContext hLineSBegin() {
		HLineSBeginContext _localctx = new HLineSBeginContext(Context, State);
		EnterRule(_localctx, 14, RULE_hLineSBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(Newline);
			State = 249;
			Match(Star);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 250;
				Match(Space);
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 256;
			Match(Star);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 257;
				Match(Space);
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 263;
			Match(Star);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public Indent3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndent3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndent3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent3Context indent3() {
		Indent3Context _localctx = new Indent3Context(Context, State);
		EnterRule(_localctx, 16, RULE_indent3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(Newline);
			State = 266;
			Match(Space);
			State = 267;
			Match(Space);
			State = 268;
			Match(Space);
			State = 269;
			Match(Space);
			State = 270;
			Match(Space);
			State = 271;
			Match(Space);
			State = 272;
			Match(Space);
			State = 273;
			Match(Space);
			State = 274;
			Match(Space);
			State = 275;
			Match(Space);
			State = 276;
			Match(Space);
			State = 277;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public Indent2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndent2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndent2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent2Context indent2() {
		Indent2Context _localctx = new Indent2Context(Context, State);
		EnterRule(_localctx, 18, RULE_indent2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(Newline);
			State = 280;
			Match(Space);
			State = 281;
			Match(Space);
			State = 282;
			Match(Space);
			State = 283;
			Match(Space);
			State = 284;
			Match(Space);
			State = 285;
			Match(Space);
			State = 286;
			Match(Space);
			State = 287;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public Indent1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndent1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndent1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent1Context indent1() {
		Indent1Context _localctx = new Indent1Context(Context, State);
		EnterRule(_localctx, 20, RULE_indent1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(Newline);
			State = 290;
			Match(Space);
			State = 291;
			Match(Space);
			State = 292;
			Match(Space);
			State = 293;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FencedCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Code() { return GetTokens(Markdown.Code); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Code(int i) {
			return GetToken(Markdown.Code, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedTextContext fencedText() {
			return GetRuleContext<FencedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Tilde() { return GetTokens(Markdown.Tilde); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde(int i) {
			return GetToken(Markdown.Tilde, i);
		}
		public FencedCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fencedCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterFencedCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitFencedCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFencedCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FencedCodeContext fencedCode() {
		FencedCodeContext _localctx = new FencedCodeContext(Context, State);
		EnterRule(_localctx, 22, RULE_fencedCode);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				Match(Newline);
				State = 296;
				Match(Code);
				State = 297;
				Match(Code);
				State = 298;
				Match(Code);
				State = 299;
				fencedText();
				State = 300;
				Match(Code);
				State = 301;
				Match(Code);
				State = 302;
				Match(Code);
				State = 303;
				optionalText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				Match(Newline);
				State = 306;
				Match(Tilde);
				State = 307;
				Match(Tilde);
				State = 308;
				Match(Tilde);
				State = 309;
				fencedText();
				State = 310;
				Match(Tilde);
				State = 311;
				Match(Tilde);
				State = 312;
				Match(Tilde);
				State = 313;
				optionalText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedCodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCode1Context[] indentedCode1() {
			return GetRuleContexts<IndentedCode1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCode1Context indentedCode1(int i) {
			return GetRuleContext<IndentedCode1Context>(i);
		}
		public IndentedCodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedCodeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndentedCodeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndentedCodeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedCodeBlockContext indentedCodeBlock() {
		IndentedCodeBlockContext _localctx = new IndentedCodeBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_indentedCodeBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(Newline);
			State = 318;
			indentedCode1();
			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 320;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						State = 319;
						Match(Newline);
						}
						break;
					}
					State = 322;
					indentedCode1();
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedCode1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public IndentedCode1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedCode1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndentedCode1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndentedCode1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedCode1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedCode1Context indentedCode1() {
		IndentedCode1Context _localctx = new IndentedCode1Context(Context, State);
		EnterRule(_localctx, 26, RULE_indentedCode1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			indent1();
			State = 329;
			requiredText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList0Context iList0() {
			return GetRuleContext<IList0Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList0Context eList0() {
			return GetRuleContext<EList0Context>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 28, RULE_list);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331;
				iList0();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332;
				eList0();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList1Context iList1() {
			return GetRuleContext<IList1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList1Context eList1() {
			return GetRuleContext<EList1Context>(0);
		}
		public List1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List1Context list1() {
		List1Context _localctx = new List1Context(Context, State);
		EnterRule(_localctx, 30, RULE_list1);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				iList1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				eList1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList2Context iList2() {
			return GetRuleContext<IList2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList2Context eList2() {
			return GetRuleContext<EList2Context>(0);
		}
		public List2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List2Context list2() {
		List2Context _localctx = new List2Context(Context, State);
		EnterRule(_localctx, 32, RULE_list2);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				iList2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				eList2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList3Context iList3() {
			return GetRuleContext<IList3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList3Context eList3() {
			return GetRuleContext<EList3Context>(0);
		}
		public List3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List3Context list3() {
		List3Context _localctx = new List3Context(Context, State);
		EnterRule(_localctx, 34, RULE_list3);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				iList3();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				eList3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem3Context[] iListItem3() {
			return GetRuleContexts<IListItem3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem3Context iListItem3(int i) {
			return GetRuleContext<IListItem3Context>(i);
		}
		public IList3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList3Context iList3() {
		IList3Context _localctx = new IList3Context(Context, State);
		EnterRule(_localctx, 36, RULE_iList3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 347;
					iListItem3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem2Context[] iListItem2() {
			return GetRuleContexts<IListItem2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem2Context iListItem2(int i) {
			return GetRuleContext<IListItem2Context>(i);
		}
		public IList2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList2Context iList2() {
		IList2Context _localctx = new IList2Context(Context, State);
		EnterRule(_localctx, 38, RULE_iList2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 352;
					iListItem2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem1Context[] iListItem1() {
			return GetRuleContexts<IListItem1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem1Context iListItem1(int i) {
			return GetRuleContext<IListItem1Context>(i);
		}
		public IList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList1Context iList1() {
		IList1Context _localctx = new IList1Context(Context, State);
		EnterRule(_localctx, 40, RULE_iList1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 357;
					iListItem1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem0Context[] iListItem0() {
			return GetRuleContexts<IListItem0Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem0Context iListItem0(int i) {
			return GetRuleContext<IListItem0Context>(i);
		}
		public IList0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList0Context iList0() {
		IList0Context _localctx = new IList0Context(Context, State);
		EnterRule(_localctx, 42, RULE_iList0);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 362;
					iListItem0();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent3Context indent3() {
			return GetRuleContext<Indent3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public IListItem3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem3Context iListItem3() {
		IListItem3Context _localctx = new IListItem3Context(Context, State);
		EnterRule(_localctx, 44, RULE_iListItem3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			indent3();
			State = 368;
			iListBegin();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 369;
				Match(Space);
				State = 370;
				requiredText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent2Context indent2() {
			return GetRuleContext<Indent2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List3Context list3() {
			return GetRuleContext<List3Context>(0);
		}
		public IListItem2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem2Context iListItem2() {
		IListItem2Context _localctx = new IListItem2Context(Context, State);
		EnterRule(_localctx, 46, RULE_iListItem2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			indent2();
			State = 374;
			iListBegin();
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 375;
				Match(Space);
				State = 376;
				requiredText();
				}
			}

			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 379;
				list3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List2Context list2() {
			return GetRuleContext<List2Context>(0);
		}
		public IListItem1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem1Context iListItem1() {
		IListItem1Context _localctx = new IListItem1Context(Context, State);
		EnterRule(_localctx, 48, RULE_iListItem1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			indent1();
			State = 383;
			iListBegin();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 384;
				Match(Space);
				State = 385;
				requiredText();
				}
			}

			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 388;
				list2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List1Context list1() {
			return GetRuleContext<List1Context>(0);
		}
		public IListItem0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem0Context iListItem0() {
		IListItem0Context _localctx = new IListItem0Context(Context, State);
		EnterRule(_localctx, 50, RULE_iListItem0);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(Newline);
			State = 392;
			iListBegin();
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 393;
				Match(Space);
				State = 394;
				requiredText();
				}
			}

			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 397;
				list1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash() { return GetToken(Markdown.Dash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(Markdown.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(Markdown.Star, 0); }
		public IListBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListBeginContext iListBegin() {
		IListBeginContext _localctx = new IListBeginContext(Context, State);
		EnterRule(_localctx, 52, RULE_iListBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem3Context[] eListItem3() {
			return GetRuleContexts<EListItem3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem3Context eListItem3(int i) {
			return GetRuleContext<EListItem3Context>(i);
		}
		public EList3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList3Context eList3() {
		EList3Context _localctx = new EList3Context(Context, State);
		EnterRule(_localctx, 54, RULE_eList3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 402;
					eListItem3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem2Context[] eListItem2() {
			return GetRuleContexts<EListItem2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem2Context eListItem2(int i) {
			return GetRuleContext<EListItem2Context>(i);
		}
		public EList2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList2Context eList2() {
		EList2Context _localctx = new EList2Context(Context, State);
		EnterRule(_localctx, 56, RULE_eList2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 407;
					eListItem2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem1Context[] eListItem1() {
			return GetRuleContexts<EListItem1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem1Context eListItem1(int i) {
			return GetRuleContext<EListItem1Context>(i);
		}
		public EList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList1Context eList1() {
		EList1Context _localctx = new EList1Context(Context, State);
		EnterRule(_localctx, 58, RULE_eList1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 412;
					eListItem1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem0Context[] eListItem0() {
			return GetRuleContexts<EListItem0Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem0Context eListItem0(int i) {
			return GetRuleContext<EListItem0Context>(i);
		}
		public EList0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList0Context eList0() {
		EList0Context _localctx = new EList0Context(Context, State);
		EnterRule(_localctx, 60, RULE_eList0);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 417;
					eListItem0();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent3Context indent3() {
			return GetRuleContext<Indent3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public EListItem3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem3Context eListItem3() {
		EListItem3Context _localctx = new EListItem3Context(Context, State);
		EnterRule(_localctx, 62, RULE_eListItem3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			indent3();
			State = 423;
			eListBegin();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 424;
				Match(Space);
				State = 425;
				requiredText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent2Context indent2() {
			return GetRuleContext<Indent2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List3Context list3() {
			return GetRuleContext<List3Context>(0);
		}
		public EListItem2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem2Context eListItem2() {
		EListItem2Context _localctx = new EListItem2Context(Context, State);
		EnterRule(_localctx, 64, RULE_eListItem2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			indent2();
			State = 429;
			eListBegin();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 430;
				Match(Space);
				State = 431;
				requiredText();
				}
			}

			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 434;
				list3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List2Context list2() {
			return GetRuleContext<List2Context>(0);
		}
		public EListItem1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem1Context eListItem1() {
		EListItem1Context _localctx = new EListItem1Context(Context, State);
		EnterRule(_localctx, 66, RULE_eListItem1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			indent1();
			State = 438;
			eListBegin();
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 439;
				Match(Space);
				State = 440;
				requiredText();
				}
			}

			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 443;
				list2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List1Context list1() {
			return GetRuleContext<List1Context>(0);
		}
		public EListItem0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem0Context eListItem0() {
		EListItem0Context _localctx = new EListItem0Context(Context, State);
		EnterRule(_localctx, 68, RULE_eListItem0);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(Newline);
			State = 447;
			eListBegin();
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 448;
				Match(Space);
				State = 449;
				requiredText();
				}
			}

			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 452;
				list1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(Markdown.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Markdown.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Digit() { return GetTokens(Markdown.Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digit(int i) {
			return GetToken(Markdown.Digit, i);
		}
		public EListBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListBeginContext eListBegin() {
		EListBeginContext _localctx = new EListBeginContext(Context, State);
		EnterRule(_localctx, 70, RULE_eListBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 455;
				Match(Digit);
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Digit );
			State = 460;
			_la = TokenStream.LA(1);
			if ( !(_la==RPAREN || _la==Dot) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteLineContext[] blockQuoteLine() {
			return GetRuleContexts<BlockQuoteLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteLineContext blockQuoteLine(int i) {
			return GetRuleContext<BlockQuoteLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockQuoteLineContext[] emptyBlockQuoteLine() {
			return GetRuleContexts<EmptyBlockQuoteLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockQuoteLineContext emptyBlockQuoteLine(int i) {
			return GetRuleContext<EmptyBlockQuoteLineContext>(i);
		}
		public BlockQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterBlockQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitBlockQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteContext blockQuote() {
		BlockQuoteContext _localctx = new BlockQuoteContext(Context, State);
		EnterRule(_localctx, 72, RULE_blockQuote);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 464;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						State = 462;
						blockQuoteLine();
						}
						break;
					case 2:
						{
						State = 463;
						emptyBlockQuoteLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteStartContext blockQuoteStart() {
			return GetRuleContext<BlockQuoteStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public BlockQuoteLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteLineContext blockQuoteLine() {
		BlockQuoteLineContext _localctx = new BlockQuoteLineContext(Context, State);
		EnterRule(_localctx, 74, RULE_blockQuoteLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			blockQuoteStart();
			State = 469;
			Match(Space);
			State = 470;
			requiredText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyBlockQuoteLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteStartContext blockQuoteStart() {
			return GetRuleContext<BlockQuoteStartContext>(0);
		}
		public EmptyBlockQuoteLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyBlockQuoteLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEmptyBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEmptyBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyBlockQuoteLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyBlockQuoteLineContext emptyBlockQuoteLine() {
		EmptyBlockQuoteLineContext _localctx = new EmptyBlockQuoteLineContext(Context, State);
		EnterRule(_localctx, 76, RULE_emptyBlockQuoteLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			blockQuoteStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(Markdown.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(Markdown.GT, i);
		}
		public BlockQuoteStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterBlockQuoteStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitBlockQuoteStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteStartContext blockQuoteStart() {
		BlockQuoteStartContext _localctx = new BlockQuoteStartContext(Context, State);
		EnterRule(_localctx, 78, RULE_blockQuoteStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(Newline);
			State = 475;
			Match(GT);
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 476;
				Match(GT);
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GT) {
					{
					State = 477;
					Match(GT);
					State = 485;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==GT) {
						{
						State = 478;
						Match(GT);
						State = 483;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==GT) {
							{
							State = 479;
							Match(GT);
							State = 481;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==GT) {
								{
								State = 480;
								Match(GT);
								}
							}

							}
						}

						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderRowContext headerRow() {
			return GetRuleContext<HeaderRowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorRowContext separatorRow() {
			return GetRuleContext<SeparatorRowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentRowContext[] contentRow() {
			return GetRuleContexts<ContentRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentRowContext contentRow(int i) {
			return GetRuleContext<ContentRowContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 80, RULE_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(Newline);
			State = 492;
			headerRow();
			State = 493;
			Match(Newline);
			State = 494;
			separatorRow();
			State = 495;
			Match(Newline);
			State = 496;
			contentRow();
			State = 501;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 497;
					Match(Newline);
					State = 498;
					contentRow();
					}
					} 
				}
				State = 503;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 504;
			Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext[] cellContent() {
			return GetRuleContexts<CellContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext cellContent(int i) {
			return GetRuleContext<CellContentContext>(i);
		}
		public HeaderRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headerRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHeaderRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHeaderRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderRowContext headerRow() {
		HeaderRowContext _localctx = new HeaderRowContext(Context, State);
		EnterRule(_localctx, 82, RULE_headerRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(Pipe);
			State = 507;
			cellContent();
			State = 512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 508;
					Match(Pipe);
					State = 509;
					cellContent();
					}
					} 
				}
				State = 514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 515;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext[] cellContent() {
			return GetRuleContexts<CellContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext cellContent(int i) {
			return GetRuleContext<CellContentContext>(i);
		}
		public ContentRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contentRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterContentRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitContentRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContentRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentRowContext contentRow() {
		ContentRowContext _localctx = new ContentRowContext(Context, State);
		EnterRule(_localctx, 84, RULE_contentRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(Pipe);
			State = 518;
			cellContent();
			State = 523;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 519;
					Match(Pipe);
					State = 520;
					cellContent();
					}
					} 
				}
				State = 525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 526;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		public CellContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterCellContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitCellContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContentContext cellContent() {
		CellContentContext _localctx = new CellContentContext(Context, State);
		EnterRule(_localctx, 86, RULE_cellContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018427387908L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				{
				State = 528;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==Pipe) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorContentContext[] separatorContent() {
			return GetRuleContexts<SeparatorContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorContentContext separatorContent(int i) {
			return GetRuleContext<SeparatorContentContext>(i);
		}
		public SeparatorRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSeparatorRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSeparatorRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorRowContext separatorRow() {
		SeparatorRowContext _localctx = new SeparatorRowContext(Context, State);
		EnterRule(_localctx, 88, RULE_separatorRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(Pipe);
			State = 535;
			separatorContent();
			State = 540;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 536;
					Match(Pipe);
					State = 537;
					separatorContent();
					}
					} 
				}
				State = 542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			State = 543;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(Markdown.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(Markdown.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		public SeparatorContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSeparatorContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSeparatorContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorContentContext separatorContent() {
		SeparatorContentContext _localctx = new SeparatorContentContext(Context, State);
		EnterRule(_localctx, 90, RULE_separatorContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 545;
				Match(Space);
				}
			}

			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 548;
				Match(Colon);
				}
			}

			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 551;
				Match(Dash);
				}
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Dash );
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 556;
				Match(Colon);
				}
			}

			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 559;
				Match(Space);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImageLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(Markdown.Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(Markdown.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextContext displayText() {
			return GetRuleContext<DisplayTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(Markdown.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Markdown.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Markdown.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public ImageLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imageLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterImageLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitImageLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImageLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImageLineContext imageLine() {
		ImageLineContext _localctx = new ImageLineContext(Context, State);
		EnterRule(_localctx, 92, RULE_imageLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(Newline);
			State = 563;
			Match(Exclamation);
			State = 564;
			Match(LBRACKET);
			State = 565;
			displayText();
			State = 566;
			Match(RBRACKET);
			State = 567;
			Match(LPAREN);
			State = 568;
			linkText();
			State = 569;
			Match(RPAREN);
			State = 570;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterTextLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitTextLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(Context, State);
		EnterRule(_localctx, 94, RULE_textLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(Newline);
			State = 573;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public RequiredTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterRequiredText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitRequiredText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredTextContext requiredText() {
		RequiredTextContext _localctx = new RequiredTextContext(Context, State);
		EnterRule(_localctx, 96, RULE_requiredText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 577;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 575;
					link();
					}
					break;
				case 2:
					{
					State = 576;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Newline) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public OptionalTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterOptionalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitOptionalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalTextContext optionalText() {
		OptionalTextContext _localctx = new OptionalTextContext(Context, State);
		EnterRule(_localctx, 98, RULE_optionalText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				State = 583;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 581;
					link();
					}
					break;
				case 2:
					{
					State = 582;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Newline) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(Markdown.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(Markdown.RBRACKET, i);
		}
		public DisplayTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterDisplayText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitDisplayText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayTextContext displayText() {
		DisplayTextContext _localctx = new DisplayTextContext(Context, State);
		EnterRule(_localctx, 100, RULE_displayText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 588;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==RBRACKET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -137438953476L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(Markdown.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(Markdown.RPAREN, i);
		}
		public LinkTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterLinkText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitLinkText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextContext linkText() {
		LinkTextContext _localctx = new LinkTextContext(Context, State);
		EnterRule(_localctx, 102, RULE_linkText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 593;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==RPAREN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -549755813892L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(Markdown.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(Markdown.GT, i);
		}
		public UrlTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterUrlText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitUrlText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlTextContext urlText() {
		UrlTextContext _localctx = new UrlTextContext(Context, State);
		EnterRule(_localctx, 104, RULE_urlText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 598;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==GT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8796093022212L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public HeadingTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHeadingText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHeadingText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextContext headingText() {
		HeadingTextContext _localctx = new HeadingTextContext(Context, State);
		EnterRule(_localctx, 106, RULE_headingText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 605;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
					case 1:
						{
						State = 603;
						link();
						}
						break;
					case 2:
						{
						State = 604;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==Newline) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 607;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FencedTextContext : ParserRuleContext {
		public FencedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fencedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterFencedText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitFencedText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFencedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FencedTextContext fencedText() {
		FencedTextContext _localctx = new FencedTextContext(Context, State);
		EnterRule(_localctx, 108, RULE_fencedText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 609;
					MatchWildcard();
					}
					} 
				}
				State = 614;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlLinkContext urlLink() {
			return GetRuleContext<UrlLinkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLinkContext textLink() {
			return GetRuleContext<TextLinkContext>(0);
		}
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(Context, State);
		EnterRule(_localctx, 110, RULE_link);
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615;
				urlLink();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 616;
				textLink();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Markdown.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlTextContext urlText() {
			return GetRuleContext<UrlTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Markdown.GT, 0); }
		public UrlLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterUrlLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitUrlLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlLinkContext urlLink() {
		UrlLinkContext _localctx = new UrlLinkContext(Context, State);
		EnterRule(_localctx, 112, RULE_urlLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(LT);
			State = 620;
			urlText();
			State = 621;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(Markdown.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextContext displayText() {
			return GetRuleContext<DisplayTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(Markdown.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Markdown.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Markdown.RPAREN, 0); }
		public TextLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterTextLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitTextLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLinkContext textLink() {
		TextLinkContext _localctx = new TextLinkContext(Context, State);
		EnterRule(_localctx, 114, RULE_textLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(LBRACKET);
			State = 624;
			displayText();
			State = 625;
			Match(RBRACKET);
			State = 626;
			Match(LPAREN);
			State = 627;
			linkText();
			State = 628;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,69,631,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,126,8,0,10,0,12,0,129,
		9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,4,1,138,8,1,11,1,12,1,139,3,1,142,8,1,
		1,1,1,1,1,1,1,1,1,1,3,1,149,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,158,8,
		2,3,2,160,8,2,3,2,162,8,2,3,2,164,8,2,3,2,166,8,2,1,3,1,3,1,3,4,3,171,
		8,3,11,3,12,3,172,1,3,1,3,1,3,1,3,4,3,179,8,3,11,3,12,3,180,1,3,3,3,184,
		8,3,1,4,1,4,5,4,188,8,4,10,4,12,4,191,9,4,1,4,1,4,1,4,1,4,5,4,197,8,4,
		10,4,12,4,200,9,4,1,4,1,4,1,4,1,4,5,4,206,8,4,10,4,12,4,209,9,4,1,4,1,
		4,3,4,213,8,4,1,5,1,5,1,5,5,5,218,8,5,10,5,12,5,221,9,5,1,5,1,5,5,5,225,
		8,5,10,5,12,5,228,9,5,1,5,1,5,1,6,1,6,1,6,5,6,235,8,6,10,6,12,6,238,9,
		6,1,6,1,6,5,6,242,8,6,10,6,12,6,245,9,6,1,6,1,6,1,7,1,7,1,7,5,7,252,8,
		7,10,7,12,7,255,9,7,1,7,1,7,5,7,259,8,7,10,7,12,7,262,9,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,3,11,316,8,11,1,12,1,12,1,12,3,12,321,8,12,1,12,5,12,324,8,12,
		10,12,12,12,327,9,12,1,13,1,13,1,13,1,14,1,14,3,14,334,8,14,1,15,1,15,
		3,15,338,8,15,1,16,1,16,3,16,342,8,16,1,17,1,17,3,17,346,8,17,1,18,4,18,
		349,8,18,11,18,12,18,350,1,19,4,19,354,8,19,11,19,12,19,355,1,20,4,20,
		359,8,20,11,20,12,20,360,1,21,4,21,364,8,21,11,21,12,21,365,1,22,1,22,
		1,22,1,22,3,22,372,8,22,1,23,1,23,1,23,1,23,3,23,378,8,23,1,23,3,23,381,
		8,23,1,24,1,24,1,24,1,24,3,24,387,8,24,1,24,3,24,390,8,24,1,25,1,25,1,
		25,1,25,3,25,396,8,25,1,25,3,25,399,8,25,1,26,1,26,1,27,4,27,404,8,27,
		11,27,12,27,405,1,28,4,28,409,8,28,11,28,12,28,410,1,29,4,29,414,8,29,
		11,29,12,29,415,1,30,4,30,419,8,30,11,30,12,30,420,1,31,1,31,1,31,1,31,
		3,31,427,8,31,1,32,1,32,1,32,1,32,3,32,433,8,32,1,32,3,32,436,8,32,1,33,
		1,33,1,33,1,33,3,33,442,8,33,1,33,3,33,445,8,33,1,34,1,34,1,34,1,34,3,
		34,451,8,34,1,34,3,34,454,8,34,1,35,4,35,457,8,35,11,35,12,35,458,1,35,
		1,35,1,36,1,36,4,36,465,8,36,11,36,12,36,466,1,37,1,37,1,37,1,37,1,38,
		1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,482,8,39,3,39,484,8,39,3,
		39,486,8,39,3,39,488,8,39,3,39,490,8,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,5,40,500,8,40,10,40,12,40,503,9,40,1,40,1,40,1,41,1,41,1,41,
		1,41,5,41,511,8,41,10,41,12,41,514,9,41,1,41,1,41,1,42,1,42,1,42,1,42,
		5,42,522,8,42,10,42,12,42,525,9,42,1,42,1,42,1,43,5,43,530,8,43,10,43,
		12,43,533,9,43,1,44,1,44,1,44,1,44,5,44,539,8,44,10,44,12,44,542,9,44,
		1,44,1,44,1,45,3,45,547,8,45,1,45,3,45,550,8,45,1,45,4,45,553,8,45,11,
		45,12,45,554,1,45,3,45,558,8,45,1,45,3,45,561,8,45,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,4,48,578,8,48,11,
		48,12,48,579,1,49,1,49,5,49,584,8,49,10,49,12,49,587,9,49,1,50,4,50,590,
		8,50,11,50,12,50,591,1,51,4,51,595,8,51,11,51,12,51,596,1,52,4,52,600,
		8,52,11,52,12,52,601,1,53,1,53,4,53,606,8,53,11,53,12,53,607,1,54,5,54,
		611,8,54,10,54,12,54,614,9,54,1,55,1,55,3,55,618,8,55,1,56,1,56,1,56,1,
		56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,2,607,612,0,58,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
		106,108,110,112,114,0,10,2,0,2,2,64,64,2,0,2,2,61,61,2,0,2,2,65,65,1,0,
		64,66,2,0,39,39,44,44,2,0,1,1,62,62,1,0,1,1,2,0,1,1,37,37,2,0,1,1,39,39,
		2,0,1,1,43,43,662,0,127,1,0,0,0,2,148,1,0,0,0,4,150,1,0,0,0,6,183,1,0,
		0,0,8,212,1,0,0,0,10,214,1,0,0,0,12,231,1,0,0,0,14,248,1,0,0,0,16,265,
		1,0,0,0,18,279,1,0,0,0,20,289,1,0,0,0,22,315,1,0,0,0,24,317,1,0,0,0,26,
		328,1,0,0,0,28,333,1,0,0,0,30,337,1,0,0,0,32,341,1,0,0,0,34,345,1,0,0,
		0,36,348,1,0,0,0,38,353,1,0,0,0,40,358,1,0,0,0,42,363,1,0,0,0,44,367,1,
		0,0,0,46,373,1,0,0,0,48,382,1,0,0,0,50,391,1,0,0,0,52,400,1,0,0,0,54,403,
		1,0,0,0,56,408,1,0,0,0,58,413,1,0,0,0,60,418,1,0,0,0,62,422,1,0,0,0,64,
		428,1,0,0,0,66,437,1,0,0,0,68,446,1,0,0,0,70,456,1,0,0,0,72,464,1,0,0,
		0,74,468,1,0,0,0,76,472,1,0,0,0,78,474,1,0,0,0,80,491,1,0,0,0,82,506,1,
		0,0,0,84,517,1,0,0,0,86,531,1,0,0,0,88,534,1,0,0,0,90,546,1,0,0,0,92,562,
		1,0,0,0,94,572,1,0,0,0,96,577,1,0,0,0,98,585,1,0,0,0,100,589,1,0,0,0,102,
		594,1,0,0,0,104,599,1,0,0,0,106,605,1,0,0,0,108,612,1,0,0,0,110,617,1,
		0,0,0,112,619,1,0,0,0,114,623,1,0,0,0,116,126,3,2,1,0,117,126,3,8,4,0,
		118,126,3,22,11,0,119,126,3,24,12,0,120,126,3,28,14,0,121,126,3,72,36,
		0,122,126,3,80,40,0,123,126,3,92,46,0,124,126,3,94,47,0,125,116,1,0,0,
		0,125,117,1,0,0,0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,0,125,
		121,1,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,129,1,
		0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,
		130,131,5,0,0,1,131,1,1,0,0,0,132,133,3,4,2,0,133,134,5,2,0,0,134,141,
		3,106,53,0,135,137,5,2,0,0,136,138,5,52,0,0,137,136,1,0,0,0,138,139,1,
		0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,135,1,0,0,0,
		141,142,1,0,0,0,142,149,1,0,0,0,143,144,5,1,0,0,144,145,3,96,48,0,145,
		146,3,6,3,0,146,149,1,0,0,0,147,149,3,4,2,0,148,132,1,0,0,0,148,143,1,
		0,0,0,148,147,1,0,0,0,149,3,1,0,0,0,150,151,5,1,0,0,151,165,5,52,0,0,152,
		163,5,52,0,0,153,161,5,52,0,0,154,159,5,52,0,0,155,157,5,52,0,0,156,158,
		5,52,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,155,1,0,0,
		0,159,160,1,0,0,0,160,162,1,0,0,0,161,154,1,0,0,0,161,162,1,0,0,0,162,
		164,1,0,0,0,163,153,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,152,1,
		0,0,0,165,166,1,0,0,0,166,5,1,0,0,0,167,168,5,1,0,0,168,170,5,64,0,0,169,
		171,5,64,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,
		0,0,0,173,174,1,0,0,0,174,184,5,1,0,0,175,176,5,1,0,0,176,178,5,57,0,0,
		177,179,5,57,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,
		1,0,0,0,181,182,1,0,0,0,182,184,5,1,0,0,183,167,1,0,0,0,183,175,1,0,0,
		0,184,7,1,0,0,0,185,189,3,10,5,0,186,188,7,0,0,0,187,186,1,0,0,0,188,191,
		1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,
		0,192,193,5,1,0,0,193,213,1,0,0,0,194,198,3,12,6,0,195,197,7,1,0,0,196,
		195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,
		0,0,0,200,198,1,0,0,0,201,202,5,1,0,0,202,213,1,0,0,0,203,207,3,14,7,0,
		204,206,7,2,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,
		1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,1,0,0,211,213,1,0,0,
		0,212,185,1,0,0,0,212,194,1,0,0,0,212,203,1,0,0,0,213,9,1,0,0,0,214,215,
		5,1,0,0,215,219,5,64,0,0,216,218,5,2,0,0,217,216,1,0,0,0,218,221,1,0,0,
		0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,
		226,5,64,0,0,223,225,5,2,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,
		0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,64,0,0,
		230,11,1,0,0,0,231,232,5,1,0,0,232,236,5,61,0,0,233,235,5,2,0,0,234,233,
		1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,
		0,238,236,1,0,0,0,239,243,5,61,0,0,240,242,5,2,0,0,241,240,1,0,0,0,242,
		245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,1,
		0,0,0,246,247,5,61,0,0,247,13,1,0,0,0,248,249,5,1,0,0,249,253,5,65,0,0,
		250,252,5,2,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,
		1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,260,5,65,0,0,257,259,5,2,0,
		0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
		263,1,0,0,0,262,260,1,0,0,0,263,264,5,65,0,0,264,15,1,0,0,0,265,266,5,
		1,0,0,266,267,5,2,0,0,267,268,5,2,0,0,268,269,5,2,0,0,269,270,5,2,0,0,
		270,271,5,2,0,0,271,272,5,2,0,0,272,273,5,2,0,0,273,274,5,2,0,0,274,275,
		5,2,0,0,275,276,5,2,0,0,276,277,5,2,0,0,277,278,5,2,0,0,278,17,1,0,0,0,
		279,280,5,1,0,0,280,281,5,2,0,0,281,282,5,2,0,0,282,283,5,2,0,0,283,284,
		5,2,0,0,284,285,5,2,0,0,285,286,5,2,0,0,286,287,5,2,0,0,287,288,5,2,0,
		0,288,19,1,0,0,0,289,290,5,1,0,0,290,291,5,2,0,0,291,292,5,2,0,0,292,293,
		5,2,0,0,293,294,5,2,0,0,294,21,1,0,0,0,295,296,5,1,0,0,296,297,5,67,0,
		0,297,298,5,67,0,0,298,299,5,67,0,0,299,300,3,108,54,0,300,301,5,67,0,
		0,301,302,5,67,0,0,302,303,5,67,0,0,303,304,3,98,49,0,304,316,1,0,0,0,
		305,306,5,1,0,0,306,307,5,63,0,0,307,308,5,63,0,0,308,309,5,63,0,0,309,
		310,3,108,54,0,310,311,5,63,0,0,311,312,5,63,0,0,312,313,5,63,0,0,313,
		314,3,98,49,0,314,316,1,0,0,0,315,295,1,0,0,0,315,305,1,0,0,0,316,23,1,
		0,0,0,317,318,5,1,0,0,318,325,3,26,13,0,319,321,5,1,0,0,320,319,1,0,0,
		0,320,321,1,0,0,0,321,322,1,0,0,0,322,324,3,26,13,0,323,320,1,0,0,0,324,
		327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,25,1,0,0,0,327,325,1,0,
		0,0,328,329,3,20,10,0,329,330,3,96,48,0,330,27,1,0,0,0,331,334,3,42,21,
		0,332,334,3,60,30,0,333,331,1,0,0,0,333,332,1,0,0,0,334,29,1,0,0,0,335,
		338,3,40,20,0,336,338,3,58,29,0,337,335,1,0,0,0,337,336,1,0,0,0,338,31,
		1,0,0,0,339,342,3,38,19,0,340,342,3,56,28,0,341,339,1,0,0,0,341,340,1,
		0,0,0,342,33,1,0,0,0,343,346,3,36,18,0,344,346,3,54,27,0,345,343,1,0,0,
		0,345,344,1,0,0,0,346,35,1,0,0,0,347,349,3,44,22,0,348,347,1,0,0,0,349,
		350,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,37,1,0,0,0,352,354,3,46,
		23,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,
		39,1,0,0,0,357,359,3,48,24,0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,1,
		0,0,0,360,361,1,0,0,0,361,41,1,0,0,0,362,364,3,50,25,0,363,362,1,0,0,0,
		364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,43,1,0,0,0,367,368,
		3,16,8,0,368,371,3,52,26,0,369,370,5,2,0,0,370,372,3,96,48,0,371,369,1,
		0,0,0,371,372,1,0,0,0,372,45,1,0,0,0,373,374,3,18,9,0,374,377,3,52,26,
		0,375,376,5,2,0,0,376,378,3,96,48,0,377,375,1,0,0,0,377,378,1,0,0,0,378,
		380,1,0,0,0,379,381,3,34,17,0,380,379,1,0,0,0,380,381,1,0,0,0,381,47,1,
		0,0,0,382,383,3,20,10,0,383,386,3,52,26,0,384,385,5,2,0,0,385,387,3,96,
		48,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,390,3,32,16,0,
		389,388,1,0,0,0,389,390,1,0,0,0,390,49,1,0,0,0,391,392,5,1,0,0,392,395,
		3,52,26,0,393,394,5,2,0,0,394,396,3,96,48,0,395,393,1,0,0,0,395,396,1,
		0,0,0,396,398,1,0,0,0,397,399,3,30,15,0,398,397,1,0,0,0,398,399,1,0,0,
		0,399,51,1,0,0,0,400,401,7,3,0,0,401,53,1,0,0,0,402,404,3,62,31,0,403,
		402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,55,1,0,
		0,0,407,409,3,64,32,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,
		410,411,1,0,0,0,411,57,1,0,0,0,412,414,3,66,33,0,413,412,1,0,0,0,414,415,
		1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,59,1,0,0,0,417,419,3,68,34,
		0,418,417,1,0,0,0,419,420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,
		61,1,0,0,0,422,423,3,16,8,0,423,426,3,70,35,0,424,425,5,2,0,0,425,427,
		3,96,48,0,426,424,1,0,0,0,426,427,1,0,0,0,427,63,1,0,0,0,428,429,3,18,
		9,0,429,432,3,70,35,0,430,431,5,2,0,0,431,433,3,96,48,0,432,430,1,0,0,
		0,432,433,1,0,0,0,433,435,1,0,0,0,434,436,3,34,17,0,435,434,1,0,0,0,435,
		436,1,0,0,0,436,65,1,0,0,0,437,438,3,20,10,0,438,441,3,70,35,0,439,440,
		5,2,0,0,440,442,3,96,48,0,441,439,1,0,0,0,441,442,1,0,0,0,442,444,1,0,
		0,0,443,445,3,32,16,0,444,443,1,0,0,0,444,445,1,0,0,0,445,67,1,0,0,0,446,
		447,5,1,0,0,447,450,3,70,35,0,448,449,5,2,0,0,449,451,3,96,48,0,450,448,
		1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,454,3,30,15,0,453,452,1,0,
		0,0,453,454,1,0,0,0,454,69,1,0,0,0,455,457,5,68,0,0,456,455,1,0,0,0,457,
		458,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,7,
		4,0,0,461,71,1,0,0,0,462,465,3,74,37,0,463,465,3,76,38,0,464,462,1,0,0,
		0,464,463,1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,
		73,1,0,0,0,468,469,3,78,39,0,469,470,5,2,0,0,470,471,3,96,48,0,471,75,
		1,0,0,0,472,473,3,78,39,0,473,77,1,0,0,0,474,475,5,1,0,0,475,489,5,43,
		0,0,476,487,5,43,0,0,477,485,5,43,0,0,478,483,5,43,0,0,479,481,5,43,0,
		0,480,482,5,43,0,0,481,480,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,
		479,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,478,1,0,0,0,485,486,1,
		0,0,0,486,488,1,0,0,0,487,477,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,
		489,476,1,0,0,0,489,490,1,0,0,0,490,79,1,0,0,0,491,492,5,1,0,0,492,493,
		3,82,41,0,493,494,5,1,0,0,494,495,3,88,44,0,495,496,5,1,0,0,496,501,3,
		84,42,0,497,498,5,1,0,0,498,500,3,84,42,0,499,497,1,0,0,0,500,503,1,0,
		0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,
		505,5,1,0,0,505,81,1,0,0,0,506,507,5,62,0,0,507,512,3,86,43,0,508,509,
		5,62,0,0,509,511,3,86,43,0,510,508,1,0,0,0,511,514,1,0,0,0,512,510,1,0,
		0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,516,5,62,0,0,516,
		83,1,0,0,0,517,518,5,62,0,0,518,523,3,86,43,0,519,520,5,62,0,0,520,522,
		3,86,43,0,521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,
		0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,527,5,62,0,0,527,85,1,0,0,0,528,
		530,8,5,0,0,529,528,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,1,
		0,0,0,532,87,1,0,0,0,533,531,1,0,0,0,534,535,5,62,0,0,535,540,3,90,45,
		0,536,537,5,62,0,0,537,539,3,90,45,0,538,536,1,0,0,0,539,542,1,0,0,0,540,
		538,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,540,1,0,0,0,543,544,5,
		62,0,0,544,89,1,0,0,0,545,547,5,2,0,0,546,545,1,0,0,0,546,547,1,0,0,0,
		547,549,1,0,0,0,548,550,5,47,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,552,
		1,0,0,0,551,553,5,64,0,0,552,551,1,0,0,0,553,554,1,0,0,0,554,552,1,0,0,
		0,554,555,1,0,0,0,555,557,1,0,0,0,556,558,5,47,0,0,557,556,1,0,0,0,557,
		558,1,0,0,0,558,560,1,0,0,0,559,561,5,2,0,0,560,559,1,0,0,0,560,561,1,
		0,0,0,561,91,1,0,0,0,562,563,5,1,0,0,563,564,5,49,0,0,564,565,5,36,0,0,
		565,566,3,100,50,0,566,567,5,37,0,0,567,568,5,38,0,0,568,569,3,102,51,
		0,569,570,5,39,0,0,570,571,3,98,49,0,571,93,1,0,0,0,572,573,5,1,0,0,573,
		574,3,98,49,0,574,95,1,0,0,0,575,578,3,110,55,0,576,578,8,6,0,0,577,575,
		1,0,0,0,577,576,1,0,0,0,578,579,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,
		0,580,97,1,0,0,0,581,584,3,110,55,0,582,584,8,6,0,0,583,581,1,0,0,0,583,
		582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,99,1,0,
		0,0,587,585,1,0,0,0,588,590,8,7,0,0,589,588,1,0,0,0,590,591,1,0,0,0,591,
		589,1,0,0,0,591,592,1,0,0,0,592,101,1,0,0,0,593,595,8,8,0,0,594,593,1,
		0,0,0,595,596,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,103,1,0,0,0,
		598,600,8,9,0,0,599,598,1,0,0,0,600,601,1,0,0,0,601,599,1,0,0,0,601,602,
		1,0,0,0,602,105,1,0,0,0,603,606,3,110,55,0,604,606,8,6,0,0,605,603,1,0,
		0,0,605,604,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,607,605,1,0,0,0,608,
		107,1,0,0,0,609,611,9,0,0,0,610,609,1,0,0,0,611,614,1,0,0,0,612,613,1,
		0,0,0,612,610,1,0,0,0,613,109,1,0,0,0,614,612,1,0,0,0,615,618,3,112,56,
		0,616,618,3,114,57,0,617,615,1,0,0,0,617,616,1,0,0,0,618,111,1,0,0,0,619,
		620,5,42,0,0,620,621,3,104,52,0,621,622,5,43,0,0,622,113,1,0,0,0,623,624,
		5,36,0,0,624,625,3,100,50,0,625,626,5,37,0,0,626,627,5,38,0,0,627,628,
		3,102,51,0,628,629,5,39,0,0,629,115,1,0,0,0,81,125,127,139,141,148,157,
		159,161,163,165,172,180,183,189,198,207,212,219,226,236,243,253,260,315,
		320,325,333,337,341,345,350,355,360,365,371,377,380,386,389,395,398,405,
		410,415,420,426,432,435,441,444,450,453,458,464,466,481,483,485,487,489,
		501,512,523,531,540,546,549,554,557,560,577,579,583,585,591,596,601,605,
		607,612,617
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MarkdownParsing
