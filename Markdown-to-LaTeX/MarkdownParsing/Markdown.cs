//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/artur/RiderProjects/Markdown-to-LaTeX/Markdown-to-LaTeX/Markdown.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MarkdownParsing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Markdown : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Newline=1, Space=2, Tab=3, EscExclamation=4, EscDoubleQuote=5, EscSharp=6, 
		EscDolar=7, EscPercent=8, EscAmp=9, EscQuote=10, EscLPAREN=11, EscRPAREN=12, 
		EscStar=13, EscPlus=14, EscComma=15, EscDash=16, EscDot=17, EscSlash=18, 
		EscColon=19, EscSemicilon=20, EscLT=21, EscEqual=22, EscGT=23, EscQuestion=24, 
		EscAt=25, EscLBRACKET=26, EscBackslash=27, EscRBRACKET=28, EscCarrot=29, 
		EscUnderscore=30, EscCode=31, EscLBRACE=32, EscPipe=33, EscRBRACE=34, 
		EscTilde=35, LBRACKET=36, RBRACKET=37, LPAREN=38, RPAREN=39, LBRACE=40, 
		RBRACE=41, LT=42, GT=43, Dot=44, Slash=45, Backslash=46, Colon=47, Semicolon=48, 
		Exclamation=49, Quote=50, DoubleQuote=51, Sharp=52, Dolar=53, Percent=54, 
		Amp=55, Comma=56, Equal=57, Question=58, At=59, Carrot=60, Underscore=61, 
		Pipe=62, Tilde=63, Dash=64, Star=65, Plus=66, Code=67, Digit=68, Other=69;
	public const int
		RULE_document = 0, RULE_heading = 1, RULE_headingStart = 2, RULE_setextEnd = 3, 
		RULE_horizontalLine = 4, RULE_hLineDBegin = 5, RULE_hLineUBegin = 6, RULE_hLineSBegin = 7, 
		RULE_indent3 = 8, RULE_indent2 = 9, RULE_indent1 = 10, RULE_fencedCode = 11, 
		RULE_indentedCodeBlock = 12, RULE_indentedCode1 = 13, RULE_list = 14, 
		RULE_list1 = 15, RULE_list2 = 16, RULE_list3 = 17, RULE_iList3 = 18, RULE_iList2 = 19, 
		RULE_iList1 = 20, RULE_iList0 = 21, RULE_iListItem3 = 22, RULE_iListItem2 = 23, 
		RULE_iListItem1 = 24, RULE_iListItem0 = 25, RULE_iListBegin = 26, RULE_eList3 = 27, 
		RULE_eList2 = 28, RULE_eList1 = 29, RULE_eList0 = 30, RULE_eListItem3 = 31, 
		RULE_eListItem2 = 32, RULE_eListItem1 = 33, RULE_eListItem0 = 34, RULE_eListBegin = 35, 
		RULE_blockQuote = 36, RULE_blockQuoteLine = 37, RULE_emptyBlockQuoteLine = 38, 
		RULE_blockQuoteStart = 39, RULE_table = 40, RULE_headerRow = 41, RULE_contentRow = 42, 
		RULE_cellContent = 43, RULE_separatorRow = 44, RULE_separatorContent = 45, 
		RULE_imageLine = 46, RULE_linkLine = 47, RULE_textLine = 48, RULE_requiredText = 49, 
		RULE_optionalText = 50, RULE_displayText = 51, RULE_linkText = 52, RULE_urlText = 53, 
		RULE_headingText = 54, RULE_fencedText = 55, RULE_codeText = 56, RULE_link = 57, 
		RULE_urlLink = 58, RULE_textLink = 59;
	public static readonly string[] ruleNames = {
		"document", "heading", "headingStart", "setextEnd", "horizontalLine", 
		"hLineDBegin", "hLineUBegin", "hLineSBegin", "indent3", "indent2", "indent1", 
		"fencedCode", "indentedCodeBlock", "indentedCode1", "list", "list1", "list2", 
		"list3", "iList3", "iList2", "iList1", "iList0", "iListItem3", "iListItem2", 
		"iListItem1", "iListItem0", "iListBegin", "eList3", "eList2", "eList1", 
		"eList0", "eListItem3", "eListItem2", "eListItem1", "eListItem0", "eListBegin", 
		"blockQuote", "blockQuoteLine", "emptyBlockQuoteLine", "blockQuoteStart", 
		"table", "headerRow", "contentRow", "cellContent", "separatorRow", "separatorContent", 
		"imageLine", "linkLine", "textLine", "requiredText", "optionalText", "displayText", 
		"linkText", "urlText", "headingText", "fencedText", "codeText", "link", 
		"urlLink", "textLink"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "' '", "'\\t'", "'\\!'", "'\\\"'", "'\\#'", "'\\$'", "'\\%'", 
		"'\\&'", "'\\''", "'\\('", "'\\)'", "'\\*'", "'\\+'", "'\\,'", "'\\-'", 
		"'\\.'", "'\\/'", "'\\:'", "'\\;'", "'\\<'", "'\\='", "'\\>'", "'\\?'", 
		"'\\@'", "'\\['", "'\\\\'", "'\\]'", "'\\^'", "'\\_'", "'\\`'", "'\\{'", 
		"'\\|'", "'\\}'", "'\\~'", "'['", "']'", "'('", "')'", "'{'", "'}'", "'<'", 
		"'>'", "'.'", "'/'", "'\\'", "':'", "';'", "'!'", "'''", "'\"'", "'#'", 
		"'$'", "'%'", "'&'", "','", "'='", "'?'", "'@'", "'^'", "'_'", "'|'", 
		"'~'", "'-'", "'*'", "'+'", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Newline", "Space", "Tab", "EscExclamation", "EscDoubleQuote", "EscSharp", 
		"EscDolar", "EscPercent", "EscAmp", "EscQuote", "EscLPAREN", "EscRPAREN", 
		"EscStar", "EscPlus", "EscComma", "EscDash", "EscDot", "EscSlash", "EscColon", 
		"EscSemicilon", "EscLT", "EscEqual", "EscGT", "EscQuestion", "EscAt", 
		"EscLBRACKET", "EscBackslash", "EscRBRACKET", "EscCarrot", "EscUnderscore", 
		"EscCode", "EscLBRACE", "EscPipe", "EscRBRACE", "EscTilde", "LBRACKET", 
		"RBRACKET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LT", "GT", "Dot", 
		"Slash", "Backslash", "Colon", "Semicolon", "Exclamation", "Quote", "DoubleQuote", 
		"Sharp", "Dolar", "Percent", "Amp", "Comma", "Equal", "Question", "At", 
		"Carrot", "Underscore", "Pipe", "Tilde", "Dash", "Star", "Plus", "Code", 
		"Digit", "Other"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Markdown.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Markdown() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Markdown(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Markdown(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Markdown.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext[] heading() {
			return GetRuleContexts<HeadingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext heading(int i) {
			return GetRuleContext<HeadingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HorizontalLineContext[] horizontalLine() {
			return GetRuleContexts<HorizontalLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HorizontalLineContext horizontalLine(int i) {
			return GetRuleContext<HorizontalLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedCodeContext[] fencedCode() {
			return GetRuleContexts<FencedCodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedCodeContext fencedCode(int i) {
			return GetRuleContext<FencedCodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCodeBlockContext[] indentedCodeBlock() {
			return GetRuleContexts<IndentedCodeBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCodeBlockContext indentedCodeBlock(int i) {
			return GetRuleContext<IndentedCodeBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext[] list() {
			return GetRuleContexts<ListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list(int i) {
			return GetRuleContext<ListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteContext[] blockQuote() {
			return GetRuleContexts<BlockQuoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteContext blockQuote(int i) {
			return GetRuleContext<BlockQuoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageLineContext[] imageLine() {
			return GetRuleContexts<ImageLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageLineContext imageLine(int i) {
			return GetRuleContext<ImageLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkLineContext[] linkLine() {
			return GetRuleContexts<LinkLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkLineContext linkLine(int i) {
			return GetRuleContext<LinkLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Newline) {
				{
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 120;
					heading();
					}
					break;
				case 2:
					{
					State = 121;
					horizontalLine();
					}
					break;
				case 3:
					{
					State = 122;
					fencedCode();
					}
					break;
				case 4:
					{
					State = 123;
					indentedCodeBlock();
					}
					break;
				case 5:
					{
					State = 124;
					list();
					}
					break;
				case 6:
					{
					State = 125;
					blockQuote();
					}
					break;
				case 7:
					{
					State = 126;
					table();
					}
					break;
				case 8:
					{
					State = 127;
					imageLine();
					}
					break;
				case 9:
					{
					State = 128;
					linkLine();
					}
					break;
				case 10:
					{
					State = 129;
					textLine();
					}
					break;
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 135;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
	 
		public HeadingContext() { }
		public virtual void CopyFrom(HeadingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetextHeadingContext : HeadingContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetextEndContext setextEnd() {
			return GetRuleContext<SetextEndContext>(0);
		}
		public SetextHeadingContext(HeadingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSetextHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSetextHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetextHeading(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyHeadingContext : HeadingContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingStartContext headingStart() {
			return GetRuleContext<HeadingStartContext>(0);
		}
		public EmptyHeadingContext(HeadingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEmptyHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEmptyHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyHeading(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtxHeadingContext : HeadingContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadingStartContext headingStart() {
			return GetRuleContext<HeadingStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingTextContext headingText() {
			return GetRuleContext<HeadingTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sharp() { return GetTokens(Markdown.Sharp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp(int i) {
			return GetToken(Markdown.Sharp, i);
		}
		public AtxHeadingContext(HeadingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterAtxHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitAtxHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtxHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(Context, State);
		EnterRule(_localctx, 2, RULE_heading);
		int _la;
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new AtxHeadingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				headingStart();
				State = 138;
				Match(Space);
				State = 139;
				headingText();
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Space) {
					{
					State = 140;
					Match(Space);
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 141;
						Match(Sharp);
						}
						}
						State = 144;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Sharp );
					}
				}

				}
				break;
			case 2:
				_localctx = new SetextHeadingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(Newline);
				State = 149;
				requiredText();
				State = 150;
				setextEnd();
				}
				break;
			case 3:
				_localctx = new EmptyHeadingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				headingStart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sharp() { return GetTokens(Markdown.Sharp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp(int i) {
			return GetToken(Markdown.Sharp, i);
		}
		public HeadingStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHeadingStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHeadingStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingStartContext headingStart() {
		HeadingStartContext _localctx = new HeadingStartContext(Context, State);
		EnterRule(_localctx, 4, RULE_headingStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(Newline);
			State = 156;
			Match(Sharp);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sharp) {
				{
				State = 157;
				Match(Sharp);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sharp) {
					{
					State = 158;
					Match(Sharp);
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Sharp) {
						{
						State = 159;
						Match(Sharp);
						State = 164;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Sharp) {
							{
							State = 160;
							Match(Sharp);
							State = 162;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Sharp) {
								{
								State = 161;
								Match(Sharp);
								}
							}

							}
						}

						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetextEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(Markdown.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(Markdown.Equal, i);
		}
		public SetextEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setextEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSetextEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSetextEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetextEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetextEndContext setextEnd() {
		SetextEndContext _localctx = new SetextEndContext(Context, State);
		EnterRule(_localctx, 6, RULE_setextEnd);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				Match(Newline);
				State = 173;
				Match(Dash);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 174;
					Match(Dash);
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Dash );
				State = 179;
				Match(Newline);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(Newline);
				State = 181;
				Match(Equal);
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 182;
					Match(Equal);
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Equal );
				State = 187;
				Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HLineDBeginContext hLineDBegin() {
			return GetRuleContext<HLineDBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HLineUBeginContext hLineUBegin() {
			return GetRuleContext<HLineUBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Underscore() { return GetTokens(Markdown.Underscore); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore(int i) {
			return GetToken(Markdown.Underscore, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HLineSBeginContext hLineSBegin() {
			return GetRuleContext<HLineSBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(Markdown.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(Markdown.Star, i);
		}
		public HorizontalLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHorizontalLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHorizontalLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalLineContext horizontalLine() {
		HorizontalLineContext _localctx = new HorizontalLineContext(Context, State);
		EnterRule(_localctx, 8, RULE_horizontalLine);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				hLineDBegin();
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Dash) {
					{
					{
					State = 191;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Dash) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 197;
				Match(Newline);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				hLineUBegin();
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Underscore) {
					{
					{
					State = 200;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Underscore) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 206;
				Match(Newline);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208;
				hLineSBegin();
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Space || _la==Star) {
					{
					{
					State = 209;
					_la = TokenStream.LA(1);
					if ( !(_la==Space || _la==Star) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 215;
				Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineDBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public HLineDBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineDBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHLineDBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHLineDBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineDBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineDBeginContext hLineDBegin() {
		HLineDBeginContext _localctx = new HLineDBeginContext(Context, State);
		EnterRule(_localctx, 10, RULE_hLineDBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(Newline);
			State = 220;
			Match(Dash);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 221;
				Match(Space);
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			Match(Dash);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 228;
				Match(Space);
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 234;
			Match(Dash);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineUBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Underscore() { return GetTokens(Markdown.Underscore); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore(int i) {
			return GetToken(Markdown.Underscore, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public HLineUBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineUBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHLineUBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHLineUBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineUBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineUBeginContext hLineUBegin() {
		HLineUBeginContext _localctx = new HLineUBeginContext(Context, State);
		EnterRule(_localctx, 12, RULE_hLineUBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(Newline);
			State = 237;
			Match(Underscore);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 238;
				Match(Space);
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			Match(Underscore);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 245;
				Match(Space);
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HLineSBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(Markdown.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(Markdown.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public HLineSBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hLineSBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHLineSBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHLineSBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLineSBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HLineSBeginContext hLineSBegin() {
		HLineSBeginContext _localctx = new HLineSBeginContext(Context, State);
		EnterRule(_localctx, 14, RULE_hLineSBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(Newline);
			State = 254;
			Match(Star);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 255;
				Match(Space);
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(Star);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 262;
				Match(Space);
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			Match(Star);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public Indent3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndent3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndent3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent3Context indent3() {
		Indent3Context _localctx = new Indent3Context(Context, State);
		EnterRule(_localctx, 16, RULE_indent3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(Newline);
			State = 271;
			Match(Space);
			State = 272;
			Match(Space);
			State = 273;
			Match(Space);
			State = 274;
			Match(Space);
			State = 275;
			Match(Space);
			State = 276;
			Match(Space);
			State = 277;
			Match(Space);
			State = 278;
			Match(Space);
			State = 279;
			Match(Space);
			State = 280;
			Match(Space);
			State = 281;
			Match(Space);
			State = 282;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public Indent2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndent2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndent2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent2Context indent2() {
		Indent2Context _localctx = new Indent2Context(Context, State);
		EnterRule(_localctx, 18, RULE_indent2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(Newline);
			State = 285;
			Match(Space);
			State = 286;
			Match(Space);
			State = 287;
			Match(Space);
			State = 288;
			Match(Space);
			State = 289;
			Match(Space);
			State = 290;
			Match(Space);
			State = 291;
			Match(Space);
			State = 292;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indent1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		public Indent1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndent1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndent1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indent1Context indent1() {
		Indent1Context _localctx = new Indent1Context(Context, State);
		EnterRule(_localctx, 20, RULE_indent1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(Newline);
			State = 295;
			Match(Space);
			State = 296;
			Match(Space);
			State = 297;
			Match(Space);
			State = 298;
			Match(Space);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FencedCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Code() { return GetTokens(Markdown.Code); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Code(int i) {
			return GetToken(Markdown.Code, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FencedTextContext fencedText() {
			return GetRuleContext<FencedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Tilde() { return GetTokens(Markdown.Tilde); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde(int i) {
			return GetToken(Markdown.Tilde, i);
		}
		public FencedCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fencedCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterFencedCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitFencedCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFencedCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FencedCodeContext fencedCode() {
		FencedCodeContext _localctx = new FencedCodeContext(Context, State);
		EnterRule(_localctx, 22, RULE_fencedCode);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				Match(Newline);
				State = 301;
				Match(Code);
				State = 302;
				Match(Code);
				State = 303;
				Match(Code);
				State = 304;
				fencedText();
				State = 305;
				Match(Code);
				State = 306;
				Match(Code);
				State = 307;
				Match(Code);
				State = 308;
				optionalText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(Newline);
				State = 311;
				Match(Tilde);
				State = 312;
				Match(Tilde);
				State = 313;
				Match(Tilde);
				State = 314;
				fencedText();
				State = 315;
				Match(Tilde);
				State = 316;
				Match(Tilde);
				State = 317;
				Match(Tilde);
				State = 318;
				optionalText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedCodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCode1Context[] indentedCode1() {
			return GetRuleContexts<IndentedCode1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedCode1Context indentedCode1(int i) {
			return GetRuleContext<IndentedCode1Context>(i);
		}
		public IndentedCodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedCodeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndentedCodeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndentedCodeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedCodeBlockContext indentedCodeBlock() {
		IndentedCodeBlockContext _localctx = new IndentedCodeBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_indentedCodeBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(Newline);
			State = 323;
			indentedCode1();
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 325;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						State = 324;
						Match(Newline);
						}
						break;
					}
					State = 327;
					indentedCode1();
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedCode1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeTextContext codeText() {
			return GetRuleContext<CodeTextContext>(0);
		}
		public IndentedCode1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedCode1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIndentedCode1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIndentedCode1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedCode1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedCode1Context indentedCode1() {
		IndentedCode1Context _localctx = new IndentedCode1Context(Context, State);
		EnterRule(_localctx, 26, RULE_indentedCode1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			indent1();
			State = 334;
			codeText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList0Context iList0() {
			return GetRuleContext<IList0Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList0Context eList0() {
			return GetRuleContext<EList0Context>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 28, RULE_list);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336;
				iList0();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				eList0();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList1Context iList1() {
			return GetRuleContext<IList1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList1Context eList1() {
			return GetRuleContext<EList1Context>(0);
		}
		public List1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List1Context list1() {
		List1Context _localctx = new List1Context(Context, State);
		EnterRule(_localctx, 30, RULE_list1);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				iList1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				eList1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList2Context iList2() {
			return GetRuleContext<IList2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList2Context eList2() {
			return GetRuleContext<EList2Context>(0);
		}
		public List2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List2Context list2() {
		List2Context _localctx = new List2Context(Context, State);
		EnterRule(_localctx, 32, RULE_list2);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				iList2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				eList2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IList3Context iList3() {
			return GetRuleContext<IList3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EList3Context eList3() {
			return GetRuleContext<EList3Context>(0);
		}
		public List3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List3Context list3() {
		List3Context _localctx = new List3Context(Context, State);
		EnterRule(_localctx, 34, RULE_list3);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				iList3();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				eList3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem3Context[] iListItem3() {
			return GetRuleContexts<IListItem3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem3Context iListItem3(int i) {
			return GetRuleContext<IListItem3Context>(i);
		}
		public IList3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList3Context iList3() {
		IList3Context _localctx = new IList3Context(Context, State);
		EnterRule(_localctx, 36, RULE_iList3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 352;
					iListItem3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem2Context[] iListItem2() {
			return GetRuleContexts<IListItem2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem2Context iListItem2(int i) {
			return GetRuleContext<IListItem2Context>(i);
		}
		public IList2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList2Context iList2() {
		IList2Context _localctx = new IList2Context(Context, State);
		EnterRule(_localctx, 38, RULE_iList2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 357;
					iListItem2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem1Context[] iListItem1() {
			return GetRuleContexts<IListItem1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem1Context iListItem1(int i) {
			return GetRuleContext<IListItem1Context>(i);
		}
		public IList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList1Context iList1() {
		IList1Context _localctx = new IList1Context(Context, State);
		EnterRule(_localctx, 40, RULE_iList1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 362;
					iListItem1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IList0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IListItem0Context[] iListItem0() {
			return GetRuleContexts<IListItem0Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListItem0Context iListItem0(int i) {
			return GetRuleContext<IListItem0Context>(i);
		}
		public IList0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iList0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IList0Context iList0() {
		IList0Context _localctx = new IList0Context(Context, State);
		EnterRule(_localctx, 42, RULE_iList0);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 367;
					iListItem0();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent3Context indent3() {
			return GetRuleContext<Indent3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public IListItem3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem3Context iListItem3() {
		IListItem3Context _localctx = new IListItem3Context(Context, State);
		EnterRule(_localctx, 44, RULE_iListItem3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			indent3();
			State = 373;
			iListBegin();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 374;
				Match(Space);
				State = 375;
				requiredText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent2Context indent2() {
			return GetRuleContext<Indent2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List3Context list3() {
			return GetRuleContext<List3Context>(0);
		}
		public IListItem2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem2Context iListItem2() {
		IListItem2Context _localctx = new IListItem2Context(Context, State);
		EnterRule(_localctx, 46, RULE_iListItem2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			indent2();
			State = 379;
			iListBegin();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 380;
				Match(Space);
				State = 381;
				requiredText();
				}
			}

			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 384;
				list3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List2Context list2() {
			return GetRuleContext<List2Context>(0);
		}
		public IListItem1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem1Context iListItem1() {
		IListItem1Context _localctx = new IListItem1Context(Context, State);
		EnterRule(_localctx, 48, RULE_iListItem1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			indent1();
			State = 388;
			iListBegin();
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 389;
				Match(Space);
				State = 390;
				requiredText();
				}
			}

			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 393;
				list2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListItem0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IListBeginContext iListBegin() {
			return GetRuleContext<IListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List1Context list1() {
			return GetRuleContext<List1Context>(0);
		}
		public IListItem0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListItem0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListItem0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListItem0Context iListItem0() {
		IListItem0Context _localctx = new IListItem0Context(Context, State);
		EnterRule(_localctx, 50, RULE_iListItem0);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(Newline);
			State = 397;
			iListBegin();
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 398;
				Match(Space);
				State = 399;
				requiredText();
				}
			}

			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 402;
				list1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IListBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash() { return GetToken(Markdown.Dash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(Markdown.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(Markdown.Star, 0); }
		public IListBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iListBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterIListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitIListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIListBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IListBeginContext iListBegin() {
		IListBeginContext _localctx = new IListBeginContext(Context, State);
		EnterRule(_localctx, 52, RULE_iListBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem3Context[] eListItem3() {
			return GetRuleContexts<EListItem3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem3Context eListItem3(int i) {
			return GetRuleContext<EListItem3Context>(i);
		}
		public EList3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList3Context eList3() {
		EList3Context _localctx = new EList3Context(Context, State);
		EnterRule(_localctx, 54, RULE_eList3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 407;
					eListItem3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem2Context[] eListItem2() {
			return GetRuleContexts<EListItem2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem2Context eListItem2(int i) {
			return GetRuleContext<EListItem2Context>(i);
		}
		public EList2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList2Context eList2() {
		EList2Context _localctx = new EList2Context(Context, State);
		EnterRule(_localctx, 56, RULE_eList2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 412;
					eListItem2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem1Context[] eListItem1() {
			return GetRuleContexts<EListItem1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem1Context eListItem1(int i) {
			return GetRuleContext<EListItem1Context>(i);
		}
		public EList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList1Context eList1() {
		EList1Context _localctx = new EList1Context(Context, State);
		EnterRule(_localctx, 58, RULE_eList1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 417;
					eListItem1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EList0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EListItem0Context[] eListItem0() {
			return GetRuleContexts<EListItem0Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListItem0Context eListItem0(int i) {
			return GetRuleContext<EListItem0Context>(i);
		}
		public EList0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eList0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EList0Context eList0() {
		EList0Context _localctx = new EList0Context(Context, State);
		EnterRule(_localctx, 60, RULE_eList0);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 422;
					eListItem0();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent3Context indent3() {
			return GetRuleContext<Indent3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public EListItem3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem3Context eListItem3() {
		EListItem3Context _localctx = new EListItem3Context(Context, State);
		EnterRule(_localctx, 62, RULE_eListItem3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			indent3();
			State = 428;
			eListBegin();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 429;
				Match(Space);
				State = 430;
				requiredText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent2Context indent2() {
			return GetRuleContext<Indent2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List3Context list3() {
			return GetRuleContext<List3Context>(0);
		}
		public EListItem2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem2Context eListItem2() {
		EListItem2Context _localctx = new EListItem2Context(Context, State);
		EnterRule(_localctx, 64, RULE_eListItem2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			indent2();
			State = 434;
			eListBegin();
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 435;
				Match(Space);
				State = 436;
				requiredText();
				}
			}

			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 439;
				list3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indent1Context indent1() {
			return GetRuleContext<Indent1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List2Context list2() {
			return GetRuleContext<List2Context>(0);
		}
		public EListItem1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem1Context eListItem1() {
		EListItem1Context _localctx = new EListItem1Context(Context, State);
		EnterRule(_localctx, 66, RULE_eListItem1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			indent1();
			State = 443;
			eListBegin();
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 444;
				Match(Space);
				State = 445;
				requiredText();
				}
			}

			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 448;
				list2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListItem0Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EListBeginContext eListBegin() {
			return GetRuleContext<EListBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List1Context list1() {
			return GetRuleContext<List1Context>(0);
		}
		public EListItem0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListItem0; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListItem0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListItem0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListItem0Context eListItem0() {
		EListItem0Context _localctx = new EListItem0Context(Context, State);
		EnterRule(_localctx, 68, RULE_eListItem0);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(Newline);
			State = 452;
			eListBegin();
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 453;
				Match(Space);
				State = 454;
				requiredText();
				}
			}

			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 457;
				list1();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EListBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(Markdown.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Markdown.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Digit() { return GetTokens(Markdown.Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digit(int i) {
			return GetToken(Markdown.Digit, i);
		}
		public EListBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eListBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEListBegin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EListBeginContext eListBegin() {
		EListBeginContext _localctx = new EListBeginContext(Context, State);
		EnterRule(_localctx, 70, RULE_eListBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 460;
				Match(Digit);
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Digit );
			State = 465;
			_la = TokenStream.LA(1);
			if ( !(_la==RPAREN || _la==Dot) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteLineContext[] blockQuoteLine() {
			return GetRuleContexts<BlockQuoteLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteLineContext blockQuoteLine(int i) {
			return GetRuleContext<BlockQuoteLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockQuoteLineContext[] emptyBlockQuoteLine() {
			return GetRuleContexts<EmptyBlockQuoteLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyBlockQuoteLineContext emptyBlockQuoteLine(int i) {
			return GetRuleContext<EmptyBlockQuoteLineContext>(i);
		}
		public BlockQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterBlockQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitBlockQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteContext blockQuote() {
		BlockQuoteContext _localctx = new BlockQuoteContext(Context, State);
		EnterRule(_localctx, 72, RULE_blockQuote);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 469;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						State = 467;
						blockQuoteLine();
						}
						break;
					case 2:
						{
						State = 468;
						emptyBlockQuoteLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteStartContext blockQuoteStart() {
			return GetRuleContext<BlockQuoteStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Markdown.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiredTextContext requiredText() {
			return GetRuleContext<RequiredTextContext>(0);
		}
		public BlockQuoteLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteLineContext blockQuoteLine() {
		BlockQuoteLineContext _localctx = new BlockQuoteLineContext(Context, State);
		EnterRule(_localctx, 74, RULE_blockQuoteLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			blockQuoteStart();
			State = 474;
			Match(Space);
			State = 475;
			requiredText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyBlockQuoteLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockQuoteStartContext blockQuoteStart() {
			return GetRuleContext<BlockQuoteStartContext>(0);
		}
		public EmptyBlockQuoteLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyBlockQuoteLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterEmptyBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitEmptyBlockQuoteLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyBlockQuoteLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyBlockQuoteLineContext emptyBlockQuoteLine() {
		EmptyBlockQuoteLineContext _localctx = new EmptyBlockQuoteLineContext(Context, State);
		EnterRule(_localctx, 76, RULE_emptyBlockQuoteLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			blockQuoteStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(Markdown.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(Markdown.GT, i);
		}
		public BlockQuoteStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterBlockQuoteStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitBlockQuoteStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteStartContext blockQuoteStart() {
		BlockQuoteStartContext _localctx = new BlockQuoteStartContext(Context, State);
		EnterRule(_localctx, 78, RULE_blockQuoteStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(Newline);
			State = 480;
			Match(GT);
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GT) {
				{
				State = 481;
				Match(GT);
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GT) {
					{
					State = 482;
					Match(GT);
					State = 490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==GT) {
						{
						State = 483;
						Match(GT);
						State = 488;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==GT) {
							{
							State = 484;
							Match(GT);
							State = 486;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==GT) {
								{
								State = 485;
								Match(GT);
								}
							}

							}
						}

						}
					}

					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderRowContext headerRow() {
			return GetRuleContext<HeaderRowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorRowContext separatorRow() {
			return GetRuleContext<SeparatorRowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentRowContext[] contentRow() {
			return GetRuleContexts<ContentRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentRowContext contentRow(int i) {
			return GetRuleContext<ContentRowContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 80, RULE_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			Match(Newline);
			State = 497;
			headerRow();
			State = 498;
			Match(Newline);
			State = 499;
			separatorRow();
			State = 500;
			Match(Newline);
			State = 501;
			contentRow();
			State = 506;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 502;
					Match(Newline);
					State = 503;
					contentRow();
					}
					} 
				}
				State = 508;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 509;
			Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext[] cellContent() {
			return GetRuleContexts<CellContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext cellContent(int i) {
			return GetRuleContext<CellContentContext>(i);
		}
		public HeaderRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headerRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHeaderRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHeaderRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderRowContext headerRow() {
		HeaderRowContext _localctx = new HeaderRowContext(Context, State);
		EnterRule(_localctx, 82, RULE_headerRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(Pipe);
			State = 512;
			cellContent();
			State = 517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 513;
					Match(Pipe);
					State = 514;
					cellContent();
					}
					} 
				}
				State = 519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 520;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext[] cellContent() {
			return GetRuleContexts<CellContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CellContentContext cellContent(int i) {
			return GetRuleContext<CellContentContext>(i);
		}
		public ContentRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contentRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterContentRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitContentRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContentRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentRowContext contentRow() {
		ContentRowContext _localctx = new ContentRowContext(Context, State);
		EnterRule(_localctx, 84, RULE_contentRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(Pipe);
			State = 523;
			cellContent();
			State = 528;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 524;
					Match(Pipe);
					State = 525;
					cellContent();
					}
					} 
				}
				State = 530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 531;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		public CellContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterCellContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitCellContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContentContext cellContent() {
		CellContentContext _localctx = new CellContentContext(Context, State);
		EnterRule(_localctx, 86, RULE_cellContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018427387908L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				{
				State = 533;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==Pipe) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(Markdown.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(Markdown.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorContentContext[] separatorContent() {
			return GetRuleContexts<SeparatorContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorContentContext separatorContent(int i) {
			return GetRuleContext<SeparatorContentContext>(i);
		}
		public SeparatorRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSeparatorRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSeparatorRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorRowContext separatorRow() {
		SeparatorRowContext _localctx = new SeparatorRowContext(Context, State);
		EnterRule(_localctx, 88, RULE_separatorRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(Pipe);
			State = 540;
			separatorContent();
			State = 545;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 541;
					Match(Pipe);
					State = 542;
					separatorContent();
					}
					} 
				}
				State = 547;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			State = 548;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(Markdown.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(Markdown.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dash() { return GetTokens(Markdown.Dash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dash(int i) {
			return GetToken(Markdown.Dash, i);
		}
		public SeparatorContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterSeparatorContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitSeparatorContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorContentContext separatorContent() {
		SeparatorContentContext _localctx = new SeparatorContentContext(Context, State);
		EnterRule(_localctx, 90, RULE_separatorContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 550;
				Match(Space);
				}
			}

			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 553;
				Match(Colon);
				}
			}

			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 556;
				Match(Dash);
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Dash );
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 561;
				Match(Colon);
				}
			}

			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Space) {
				{
				State = 564;
				Match(Space);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImageLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(Markdown.Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(Markdown.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextContext displayText() {
			return GetRuleContext<DisplayTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(Markdown.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Markdown.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Markdown.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public ImageLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imageLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterImageLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitImageLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImageLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImageLineContext imageLine() {
		ImageLineContext _localctx = new ImageLineContext(Context, State);
		EnterRule(_localctx, 92, RULE_imageLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(Newline);
			State = 568;
			Match(Exclamation);
			State = 569;
			Match(LBRACKET);
			State = 570;
			displayText();
			State = 571;
			Match(RBRACKET);
			State = 572;
			Match(LPAREN);
			State = 573;
			linkText();
			State = 574;
			Match(RPAREN);
			State = 575;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link() {
			return GetRuleContext<LinkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public LinkLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterLinkLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitLinkLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkLineContext linkLine() {
		LinkLineContext _localctx = new LinkLineContext(Context, State);
		EnterRule(_localctx, 94, RULE_linkLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(Newline);
			State = 578;
			link();
			State = 579;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(Markdown.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalTextContext optionalText() {
			return GetRuleContext<OptionalTextContext>(0);
		}
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterTextLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitTextLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(Context, State);
		EnterRule(_localctx, 96, RULE_textLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(Newline);
			State = 582;
			optionalText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public RequiredTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterRequiredText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitRequiredText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredTextContext requiredText() {
		RequiredTextContext _localctx = new RequiredTextContext(Context, State);
		EnterRule(_localctx, 98, RULE_requiredText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 584;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public OptionalTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterOptionalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitOptionalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalTextContext optionalText() {
		OptionalTextContext _localctx = new OptionalTextContext(Context, State);
		EnterRule(_localctx, 100, RULE_optionalText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0)) {
				{
				{
				State = 589;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(Markdown.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(Markdown.RBRACKET, i);
		}
		public DisplayTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterDisplayText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitDisplayText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayTextContext displayText() {
		DisplayTextContext _localctx = new DisplayTextContext(Context, State);
		EnterRule(_localctx, 102, RULE_displayText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 595;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==Newline || _la==RBRACKET) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -137438953476L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(Markdown.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(Markdown.RPAREN, i);
		}
		public LinkTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterLinkText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitLinkText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextContext linkText() {
		LinkTextContext _localctx = new LinkTextContext(Context, State);
		EnterRule(_localctx, 104, RULE_linkText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 600;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549755813894L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -549755813896L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(Markdown.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(Markdown.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(Markdown.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(Markdown.GT, i);
		}
		public UrlTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterUrlText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitUrlText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlTextContext urlText() {
		UrlTextContext _localctx = new UrlTextContext(Context, State);
		EnterRule(_localctx, 106, RULE_urlText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 605;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796093022214L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8796093022216L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 63L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public HeadingTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterHeadingText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitHeadingText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextContext headingText() {
		HeadingTextContext _localctx = new HeadingTextContext(Context, State);
		EnterRule(_localctx, 108, RULE_headingText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 610;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Newline) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 613;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FencedTextContext : ParserRuleContext {
		public FencedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fencedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterFencedText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitFencedText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFencedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FencedTextContext fencedText() {
		FencedTextContext _localctx = new FencedTextContext(Context, State);
		EnterRule(_localctx, 110, RULE_fencedText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 615;
					MatchWildcard();
					}
					} 
				}
				State = 620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(Markdown.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(Markdown.Newline, i);
		}
		public CodeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterCodeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitCodeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeTextContext codeText() {
		CodeTextContext _localctx = new CodeTextContext(Context, State);
		EnterRule(_localctx, 112, RULE_codeText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 621;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Newline) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlLinkContext urlLink() {
			return GetRuleContext<UrlLinkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLinkContext textLink() {
			return GetRuleContext<TextLinkContext>(0);
		}
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(Context, State);
		EnterRule(_localctx, 114, RULE_link);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627;
				urlLink();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				textLink();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Markdown.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlTextContext urlText() {
			return GetRuleContext<UrlTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Markdown.GT, 0); }
		public UrlLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterUrlLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitUrlLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlLinkContext urlLink() {
		UrlLinkContext _localctx = new UrlLinkContext(Context, State);
		EnterRule(_localctx, 116, RULE_urlLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(LT);
			State = 632;
			urlText();
			State = 633;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(Markdown.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextContext displayText() {
			return GetRuleContext<DisplayTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(Markdown.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Markdown.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Markdown.RPAREN, 0); }
		public TextLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.EnterTextLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownListener typedListener = listener as IMarkdownListener;
			if (typedListener != null) typedListener.ExitTextLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownVisitor<TResult> typedVisitor = visitor as IMarkdownVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLinkContext textLink() {
		TextLinkContext _localctx = new TextLinkContext(Context, State);
		EnterRule(_localctx, 118, RULE_textLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(LBRACKET);
			State = 636;
			displayText();
			State = 637;
			Match(RBRACKET);
			State = 638;
			Match(LPAREN);
			State = 639;
			linkText();
			State = 640;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,69,643,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		5,0,131,8,0,10,0,12,0,134,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,4,1,143,8,1,
		11,1,12,1,144,3,1,147,8,1,1,1,1,1,1,1,1,1,1,1,3,1,154,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,163,8,2,3,2,165,8,2,3,2,167,8,2,3,2,169,8,2,3,2,171,
		8,2,1,3,1,3,1,3,4,3,176,8,3,11,3,12,3,177,1,3,1,3,1,3,1,3,4,3,184,8,3,
		11,3,12,3,185,1,3,3,3,189,8,3,1,4,1,4,5,4,193,8,4,10,4,12,4,196,9,4,1,
		4,1,4,1,4,1,4,5,4,202,8,4,10,4,12,4,205,9,4,1,4,1,4,1,4,1,4,5,4,211,8,
		4,10,4,12,4,214,9,4,1,4,1,4,3,4,218,8,4,1,5,1,5,1,5,5,5,223,8,5,10,5,12,
		5,226,9,5,1,5,1,5,5,5,230,8,5,10,5,12,5,233,9,5,1,5,1,5,1,6,1,6,1,6,5,
		6,240,8,6,10,6,12,6,243,9,6,1,6,1,6,5,6,247,8,6,10,6,12,6,250,9,6,1,6,
		1,6,1,7,1,7,1,7,5,7,257,8,7,10,7,12,7,260,9,7,1,7,1,7,5,7,264,8,7,10,7,
		12,7,267,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,321,8,11,1,12,1,12,1,12,3,12,326,
		8,12,1,12,5,12,329,8,12,10,12,12,12,332,9,12,1,13,1,13,1,13,1,14,1,14,
		3,14,339,8,14,1,15,1,15,3,15,343,8,15,1,16,1,16,3,16,347,8,16,1,17,1,17,
		3,17,351,8,17,1,18,4,18,354,8,18,11,18,12,18,355,1,19,4,19,359,8,19,11,
		19,12,19,360,1,20,4,20,364,8,20,11,20,12,20,365,1,21,4,21,369,8,21,11,
		21,12,21,370,1,22,1,22,1,22,1,22,3,22,377,8,22,1,23,1,23,1,23,1,23,3,23,
		383,8,23,1,23,3,23,386,8,23,1,24,1,24,1,24,1,24,3,24,392,8,24,1,24,3,24,
		395,8,24,1,25,1,25,1,25,1,25,3,25,401,8,25,1,25,3,25,404,8,25,1,26,1,26,
		1,27,4,27,409,8,27,11,27,12,27,410,1,28,4,28,414,8,28,11,28,12,28,415,
		1,29,4,29,419,8,29,11,29,12,29,420,1,30,4,30,424,8,30,11,30,12,30,425,
		1,31,1,31,1,31,1,31,3,31,432,8,31,1,32,1,32,1,32,1,32,3,32,438,8,32,1,
		32,3,32,441,8,32,1,33,1,33,1,33,1,33,3,33,447,8,33,1,33,3,33,450,8,33,
		1,34,1,34,1,34,1,34,3,34,456,8,34,1,34,3,34,459,8,34,1,35,4,35,462,8,35,
		11,35,12,35,463,1,35,1,35,1,36,1,36,4,36,470,8,36,11,36,12,36,471,1,37,
		1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,487,8,
		39,3,39,489,8,39,3,39,491,8,39,3,39,493,8,39,3,39,495,8,39,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,5,40,505,8,40,10,40,12,40,508,9,40,1,40,1,
		40,1,41,1,41,1,41,1,41,5,41,516,8,41,10,41,12,41,519,9,41,1,41,1,41,1,
		42,1,42,1,42,1,42,5,42,527,8,42,10,42,12,42,530,9,42,1,42,1,42,1,43,5,
		43,535,8,43,10,43,12,43,538,9,43,1,44,1,44,1,44,1,44,5,44,544,8,44,10,
		44,12,44,547,9,44,1,44,1,44,1,45,3,45,552,8,45,1,45,3,45,555,8,45,1,45,
		4,45,558,8,45,11,45,12,45,559,1,45,3,45,563,8,45,1,45,3,45,566,8,45,1,
		46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
		48,1,48,1,48,1,49,4,49,586,8,49,11,49,12,49,587,1,50,5,50,591,8,50,10,
		50,12,50,594,9,50,1,51,4,51,597,8,51,11,51,12,51,598,1,52,4,52,602,8,52,
		11,52,12,52,603,1,53,4,53,607,8,53,11,53,12,53,608,1,54,4,54,612,8,54,
		11,54,12,54,613,1,55,5,55,617,8,55,10,55,12,55,620,9,55,1,56,5,56,623,
		8,56,10,56,12,56,626,9,56,1,57,1,57,3,57,630,8,57,1,58,1,58,1,58,1,58,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,613,618,624,0,60,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
		106,108,110,112,114,116,118,0,10,2,0,2,2,64,64,2,0,2,2,61,61,2,0,2,2,65,
		65,1,0,64,66,2,0,39,39,44,44,2,0,1,1,62,62,1,0,1,1,2,0,1,1,37,37,2,0,1,
		2,39,39,2,0,1,2,43,43,671,0,132,1,0,0,0,2,153,1,0,0,0,4,155,1,0,0,0,6,
		188,1,0,0,0,8,217,1,0,0,0,10,219,1,0,0,0,12,236,1,0,0,0,14,253,1,0,0,0,
		16,270,1,0,0,0,18,284,1,0,0,0,20,294,1,0,0,0,22,320,1,0,0,0,24,322,1,0,
		0,0,26,333,1,0,0,0,28,338,1,0,0,0,30,342,1,0,0,0,32,346,1,0,0,0,34,350,
		1,0,0,0,36,353,1,0,0,0,38,358,1,0,0,0,40,363,1,0,0,0,42,368,1,0,0,0,44,
		372,1,0,0,0,46,378,1,0,0,0,48,387,1,0,0,0,50,396,1,0,0,0,52,405,1,0,0,
		0,54,408,1,0,0,0,56,413,1,0,0,0,58,418,1,0,0,0,60,423,1,0,0,0,62,427,1,
		0,0,0,64,433,1,0,0,0,66,442,1,0,0,0,68,451,1,0,0,0,70,461,1,0,0,0,72,469,
		1,0,0,0,74,473,1,0,0,0,76,477,1,0,0,0,78,479,1,0,0,0,80,496,1,0,0,0,82,
		511,1,0,0,0,84,522,1,0,0,0,86,536,1,0,0,0,88,539,1,0,0,0,90,551,1,0,0,
		0,92,567,1,0,0,0,94,577,1,0,0,0,96,581,1,0,0,0,98,585,1,0,0,0,100,592,
		1,0,0,0,102,596,1,0,0,0,104,601,1,0,0,0,106,606,1,0,0,0,108,611,1,0,0,
		0,110,618,1,0,0,0,112,624,1,0,0,0,114,629,1,0,0,0,116,631,1,0,0,0,118,
		635,1,0,0,0,120,131,3,2,1,0,121,131,3,8,4,0,122,131,3,22,11,0,123,131,
		3,24,12,0,124,131,3,28,14,0,125,131,3,72,36,0,126,131,3,80,40,0,127,131,
		3,92,46,0,128,131,3,94,47,0,129,131,3,96,48,0,130,120,1,0,0,0,130,121,
		1,0,0,0,130,122,1,0,0,0,130,123,1,0,0,0,130,124,1,0,0,0,130,125,1,0,0,
		0,130,126,1,0,0,0,130,127,1,0,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,
		134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,135,1,0,0,0,134,132,1,
		0,0,0,135,136,5,0,0,1,136,1,1,0,0,0,137,138,3,4,2,0,138,139,5,2,0,0,139,
		146,3,108,54,0,140,142,5,2,0,0,141,143,5,52,0,0,142,141,1,0,0,0,143,144,
		1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,140,1,0,0,
		0,146,147,1,0,0,0,147,154,1,0,0,0,148,149,5,1,0,0,149,150,3,98,49,0,150,
		151,3,6,3,0,151,154,1,0,0,0,152,154,3,4,2,0,153,137,1,0,0,0,153,148,1,
		0,0,0,153,152,1,0,0,0,154,3,1,0,0,0,155,156,5,1,0,0,156,170,5,52,0,0,157,
		168,5,52,0,0,158,166,5,52,0,0,159,164,5,52,0,0,160,162,5,52,0,0,161,163,
		5,52,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,160,1,0,0,
		0,164,165,1,0,0,0,165,167,1,0,0,0,166,159,1,0,0,0,166,167,1,0,0,0,167,
		169,1,0,0,0,168,158,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,157,1,
		0,0,0,170,171,1,0,0,0,171,5,1,0,0,0,172,173,5,1,0,0,173,175,5,64,0,0,174,
		176,5,64,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,
		0,0,0,178,179,1,0,0,0,179,189,5,1,0,0,180,181,5,1,0,0,181,183,5,57,0,0,
		182,184,5,57,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,
		1,0,0,0,186,187,1,0,0,0,187,189,5,1,0,0,188,172,1,0,0,0,188,180,1,0,0,
		0,189,7,1,0,0,0,190,194,3,10,5,0,191,193,7,0,0,0,192,191,1,0,0,0,193,196,
		1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,
		0,197,198,5,1,0,0,198,218,1,0,0,0,199,203,3,12,6,0,200,202,7,1,0,0,201,
		200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,
		0,0,0,205,203,1,0,0,0,206,207,5,1,0,0,207,218,1,0,0,0,208,212,3,14,7,0,
		209,211,7,2,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,
		1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,1,0,0,216,218,1,0,0,
		0,217,190,1,0,0,0,217,199,1,0,0,0,217,208,1,0,0,0,218,9,1,0,0,0,219,220,
		5,1,0,0,220,224,5,64,0,0,221,223,5,2,0,0,222,221,1,0,0,0,223,226,1,0,0,
		0,224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,
		231,5,64,0,0,228,230,5,2,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,
		0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,64,0,0,
		235,11,1,0,0,0,236,237,5,1,0,0,237,241,5,61,0,0,238,240,5,2,0,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,
		0,243,241,1,0,0,0,244,248,5,61,0,0,245,247,5,2,0,0,246,245,1,0,0,0,247,
		250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,
		0,0,0,251,252,5,61,0,0,252,13,1,0,0,0,253,254,5,1,0,0,254,258,5,65,0,0,
		255,257,5,2,0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,
		1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,265,5,65,0,0,262,264,5,2,0,
		0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
		268,1,0,0,0,267,265,1,0,0,0,268,269,5,65,0,0,269,15,1,0,0,0,270,271,5,
		1,0,0,271,272,5,2,0,0,272,273,5,2,0,0,273,274,5,2,0,0,274,275,5,2,0,0,
		275,276,5,2,0,0,276,277,5,2,0,0,277,278,5,2,0,0,278,279,5,2,0,0,279,280,
		5,2,0,0,280,281,5,2,0,0,281,282,5,2,0,0,282,283,5,2,0,0,283,17,1,0,0,0,
		284,285,5,1,0,0,285,286,5,2,0,0,286,287,5,2,0,0,287,288,5,2,0,0,288,289,
		5,2,0,0,289,290,5,2,0,0,290,291,5,2,0,0,291,292,5,2,0,0,292,293,5,2,0,
		0,293,19,1,0,0,0,294,295,5,1,0,0,295,296,5,2,0,0,296,297,5,2,0,0,297,298,
		5,2,0,0,298,299,5,2,0,0,299,21,1,0,0,0,300,301,5,1,0,0,301,302,5,67,0,
		0,302,303,5,67,0,0,303,304,5,67,0,0,304,305,3,110,55,0,305,306,5,67,0,
		0,306,307,5,67,0,0,307,308,5,67,0,0,308,309,3,100,50,0,309,321,1,0,0,0,
		310,311,5,1,0,0,311,312,5,63,0,0,312,313,5,63,0,0,313,314,5,63,0,0,314,
		315,3,110,55,0,315,316,5,63,0,0,316,317,5,63,0,0,317,318,5,63,0,0,318,
		319,3,100,50,0,319,321,1,0,0,0,320,300,1,0,0,0,320,310,1,0,0,0,321,23,
		1,0,0,0,322,323,5,1,0,0,323,330,3,26,13,0,324,326,5,1,0,0,325,324,1,0,
		0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,3,26,13,0,328,325,1,0,0,0,
		329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,25,1,0,0,0,332,330,
		1,0,0,0,333,334,3,20,10,0,334,335,3,112,56,0,335,27,1,0,0,0,336,339,3,
		42,21,0,337,339,3,60,30,0,338,336,1,0,0,0,338,337,1,0,0,0,339,29,1,0,0,
		0,340,343,3,40,20,0,341,343,3,58,29,0,342,340,1,0,0,0,342,341,1,0,0,0,
		343,31,1,0,0,0,344,347,3,38,19,0,345,347,3,56,28,0,346,344,1,0,0,0,346,
		345,1,0,0,0,347,33,1,0,0,0,348,351,3,36,18,0,349,351,3,54,27,0,350,348,
		1,0,0,0,350,349,1,0,0,0,351,35,1,0,0,0,352,354,3,44,22,0,353,352,1,0,0,
		0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,37,1,0,0,0,357,359,
		3,46,23,0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,
		0,0,361,39,1,0,0,0,362,364,3,48,24,0,363,362,1,0,0,0,364,365,1,0,0,0,365,
		363,1,0,0,0,365,366,1,0,0,0,366,41,1,0,0,0,367,369,3,50,25,0,368,367,1,
		0,0,0,369,370,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,43,1,0,0,0,372,
		373,3,16,8,0,373,376,3,52,26,0,374,375,5,2,0,0,375,377,3,98,49,0,376,374,
		1,0,0,0,376,377,1,0,0,0,377,45,1,0,0,0,378,379,3,18,9,0,379,382,3,52,26,
		0,380,381,5,2,0,0,381,383,3,98,49,0,382,380,1,0,0,0,382,383,1,0,0,0,383,
		385,1,0,0,0,384,386,3,34,17,0,385,384,1,0,0,0,385,386,1,0,0,0,386,47,1,
		0,0,0,387,388,3,20,10,0,388,391,3,52,26,0,389,390,5,2,0,0,390,392,3,98,
		49,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,32,16,0,
		394,393,1,0,0,0,394,395,1,0,0,0,395,49,1,0,0,0,396,397,5,1,0,0,397,400,
		3,52,26,0,398,399,5,2,0,0,399,401,3,98,49,0,400,398,1,0,0,0,400,401,1,
		0,0,0,401,403,1,0,0,0,402,404,3,30,15,0,403,402,1,0,0,0,403,404,1,0,0,
		0,404,51,1,0,0,0,405,406,7,3,0,0,406,53,1,0,0,0,407,409,3,62,31,0,408,
		407,1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,55,1,0,
		0,0,412,414,3,64,32,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,
		415,416,1,0,0,0,416,57,1,0,0,0,417,419,3,66,33,0,418,417,1,0,0,0,419,420,
		1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,59,1,0,0,0,422,424,3,68,34,
		0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,
		61,1,0,0,0,427,428,3,16,8,0,428,431,3,70,35,0,429,430,5,2,0,0,430,432,
		3,98,49,0,431,429,1,0,0,0,431,432,1,0,0,0,432,63,1,0,0,0,433,434,3,18,
		9,0,434,437,3,70,35,0,435,436,5,2,0,0,436,438,3,98,49,0,437,435,1,0,0,
		0,437,438,1,0,0,0,438,440,1,0,0,0,439,441,3,34,17,0,440,439,1,0,0,0,440,
		441,1,0,0,0,441,65,1,0,0,0,442,443,3,20,10,0,443,446,3,70,35,0,444,445,
		5,2,0,0,445,447,3,98,49,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,1,0,
		0,0,448,450,3,32,16,0,449,448,1,0,0,0,449,450,1,0,0,0,450,67,1,0,0,0,451,
		452,5,1,0,0,452,455,3,70,35,0,453,454,5,2,0,0,454,456,3,98,49,0,455,453,
		1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,3,30,15,0,458,457,1,0,
		0,0,458,459,1,0,0,0,459,69,1,0,0,0,460,462,5,68,0,0,461,460,1,0,0,0,462,
		463,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,7,
		4,0,0,466,71,1,0,0,0,467,470,3,74,37,0,468,470,3,76,38,0,469,467,1,0,0,
		0,469,468,1,0,0,0,470,471,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,
		73,1,0,0,0,473,474,3,78,39,0,474,475,5,2,0,0,475,476,3,98,49,0,476,75,
		1,0,0,0,477,478,3,78,39,0,478,77,1,0,0,0,479,480,5,1,0,0,480,494,5,43,
		0,0,481,492,5,43,0,0,482,490,5,43,0,0,483,488,5,43,0,0,484,486,5,43,0,
		0,485,487,5,43,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,
		484,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,483,1,0,0,0,490,491,1,
		0,0,0,491,493,1,0,0,0,492,482,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,
		494,481,1,0,0,0,494,495,1,0,0,0,495,79,1,0,0,0,496,497,5,1,0,0,497,498,
		3,82,41,0,498,499,5,1,0,0,499,500,3,88,44,0,500,501,5,1,0,0,501,506,3,
		84,42,0,502,503,5,1,0,0,503,505,3,84,42,0,504,502,1,0,0,0,505,508,1,0,
		0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,
		510,5,1,0,0,510,81,1,0,0,0,511,512,5,62,0,0,512,517,3,86,43,0,513,514,
		5,62,0,0,514,516,3,86,43,0,515,513,1,0,0,0,516,519,1,0,0,0,517,515,1,0,
		0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,521,5,62,0,0,521,
		83,1,0,0,0,522,523,5,62,0,0,523,528,3,86,43,0,524,525,5,62,0,0,525,527,
		3,86,43,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,
		0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,62,0,0,532,85,1,0,0,0,533,
		535,8,5,0,0,534,533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,
		0,0,0,537,87,1,0,0,0,538,536,1,0,0,0,539,540,5,62,0,0,540,545,3,90,45,
		0,541,542,5,62,0,0,542,544,3,90,45,0,543,541,1,0,0,0,544,547,1,0,0,0,545,
		543,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,545,1,0,0,0,548,549,5,
		62,0,0,549,89,1,0,0,0,550,552,5,2,0,0,551,550,1,0,0,0,551,552,1,0,0,0,
		552,554,1,0,0,0,553,555,5,47,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,557,
		1,0,0,0,556,558,5,64,0,0,557,556,1,0,0,0,558,559,1,0,0,0,559,557,1,0,0,
		0,559,560,1,0,0,0,560,562,1,0,0,0,561,563,5,47,0,0,562,561,1,0,0,0,562,
		563,1,0,0,0,563,565,1,0,0,0,564,566,5,2,0,0,565,564,1,0,0,0,565,566,1,
		0,0,0,566,91,1,0,0,0,567,568,5,1,0,0,568,569,5,49,0,0,569,570,5,36,0,0,
		570,571,3,102,51,0,571,572,5,37,0,0,572,573,5,38,0,0,573,574,3,104,52,
		0,574,575,5,39,0,0,575,576,3,100,50,0,576,93,1,0,0,0,577,578,5,1,0,0,578,
		579,3,114,57,0,579,580,3,100,50,0,580,95,1,0,0,0,581,582,5,1,0,0,582,583,
		3,100,50,0,583,97,1,0,0,0,584,586,8,6,0,0,585,584,1,0,0,0,586,587,1,0,
		0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,99,1,0,0,0,589,591,8,6,0,0,590,
		589,1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,101,1,
		0,0,0,594,592,1,0,0,0,595,597,8,7,0,0,596,595,1,0,0,0,597,598,1,0,0,0,
		598,596,1,0,0,0,598,599,1,0,0,0,599,103,1,0,0,0,600,602,8,8,0,0,601,600,
		1,0,0,0,602,603,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,105,1,0,0,
		0,605,607,8,9,0,0,606,605,1,0,0,0,607,608,1,0,0,0,608,606,1,0,0,0,608,
		609,1,0,0,0,609,107,1,0,0,0,610,612,8,6,0,0,611,610,1,0,0,0,612,613,1,
		0,0,0,613,614,1,0,0,0,613,611,1,0,0,0,614,109,1,0,0,0,615,617,9,0,0,0,
		616,615,1,0,0,0,617,620,1,0,0,0,618,619,1,0,0,0,618,616,1,0,0,0,619,111,
		1,0,0,0,620,618,1,0,0,0,621,623,8,6,0,0,622,621,1,0,0,0,623,626,1,0,0,
		0,624,625,1,0,0,0,624,622,1,0,0,0,625,113,1,0,0,0,626,624,1,0,0,0,627,
		630,3,116,58,0,628,630,3,118,59,0,629,627,1,0,0,0,629,628,1,0,0,0,630,
		115,1,0,0,0,631,632,5,42,0,0,632,633,3,106,53,0,633,634,5,43,0,0,634,117,
		1,0,0,0,635,636,5,36,0,0,636,637,3,102,51,0,637,638,5,37,0,0,638,639,5,
		38,0,0,639,640,3,104,52,0,640,641,5,39,0,0,641,119,1,0,0,0,79,130,132,
		144,146,153,162,164,166,168,170,177,185,188,194,203,212,217,224,231,241,
		248,258,265,320,325,330,338,342,346,350,355,360,365,370,376,382,385,391,
		394,400,403,410,415,420,425,431,437,440,446,449,455,458,463,469,471,486,
		488,490,492,494,506,517,528,536,545,551,554,559,562,565,587,592,598,603,
		608,613,618,624,629
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MarkdownParsing
